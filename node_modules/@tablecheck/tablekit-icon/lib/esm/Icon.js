var _excluded = ["size", "icon", "colors", "color", "opacities", "className"];

var _variants;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import _styled from '@emotion/styled/base';
import { css, createElement } from '@emotion/react';
import { Size } from '@tablecheck/tablekit-theme';
import { variant } from '@tablecheck/tablekit-utils';
import { forwardRef } from 'react';
import { jsx } from '@emotion/react/jsx-runtime';

function sizeVariantCss(pixelSize) {
  return /*#__PURE__*/css("height:", pixelSize, "px;width:", pixelSize, "px;font-size:", pixelSize, "px;" + (process.env.NODE_ENV === "production" ? "" : ";label:sizeVariantCss;"));
}

var SvgElement = /*#__PURE__*/_styled('svg', process.env.NODE_ENV === "production" ? {
  shouldForwardProp: function shouldForwardProp(prop) {
    return prop !== 'size';
  },
  target: "eoxoukc0"
} : {
  shouldForwardProp: function shouldForwardProp(prop) {
    return prop !== 'size';
  },
  target: "eoxoukc0",
  label: "SvgElement"
})("display:inline-block;font-size:inherit;overflow:visible;vertical-align:-0.175em;", variant({
  prop: 'size',
  default: Size.Regular,
  variants: (_variants = {}, _defineProperty(_variants, Size.XXLarge, sizeVariantCss(32)), _defineProperty(_variants, Size.XLarge, sizeVariantCss(28)), _defineProperty(_variants, Size.Large, sizeVariantCss(24)), _defineProperty(_variants, Size.Regular2, sizeVariantCss(20)), _defineProperty(_variants, Size.Regular, sizeVariantCss(16)), _defineProperty(_variants, Size.Small, sizeVariantCss(12)), _defineProperty(_variants, Size.XSmall, sizeVariantCss(8)), _variants)
}), ";");
/** @component */


var Icon = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var size = _ref.size,
      iconProp = _ref.icon,
      colors = _ref.colors,
      color = _ref.color,
      opacities = _ref.opacities,
      className = _ref.className,
      restProps = _objectWithoutProperties(_ref, _excluded);

  var icon = iconProp.icon,
      prefix = iconProp.prefix,
      dataIconName = iconProp.iconName;

  var _icon = _slicedToArray(icon, 5),
      width = _icon[0],
      height = _icon[1],
      iconPath = _icon[4];

  var iconPaths = iconPath instanceof Array ? iconPath : [iconPath];
  var viewBox = "0 0 ".concat(width, " ").concat(height);
  var paths = iconPaths.map(function (subPath, index) {
    var styling = {
      fill: color || 'currentColor',
      style: {}
    };

    if (colors && index < colors.length) {
      styling.fill = colors[index];
    }

    if (opacities && index < opacities.length) {
      styling.style = {
        opacity: opacities[index]
      };
    } else if (!opacities && !(colors || color) && iconPaths.length > 1 && index === 0) {
      styling.style = {
        opacity: 0.4
      };
    }

    return createElement("path", _objectSpread(_objectSpread({}, styling), {}, {
      key: subPath,
      d: subPath
    }));
  });
  return jsx(SvgElement, _objectSpread(_objectSpread({}, restProps), {}, {
    ref: ref,
    size: size,
    className: className,
    "aria-hidden": "true",
    focusable: "false",
    "data-prefix": prefix,
    "data-icon": dataIconName,
    role: "img",
    xmlns: "http://www.w2.org/2000/svg",
    viewBox: viewBox,
    children: paths
  }));
});
export { Icon };
