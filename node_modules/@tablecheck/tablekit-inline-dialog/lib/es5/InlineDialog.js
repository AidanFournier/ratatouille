"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InlineDialog = InlineDialog;

var _react = require("react");

var _reactPopper = require("react-popper");

var _styled = require("./styled.js");

var _jsxRuntime = require("@emotion/react/jsx-runtime");

var _excluded = ["children", "popperProps", "containerCss", "className", "renderTrigger", "onClose", "isOpen", "isControllable"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function InlineDialog(_ref) {
  var _children = _ref.children,
      _ref$popperProps = _ref.popperProps,
      popperProps = _ref$popperProps === void 0 ? {
    placement: 'bottom-start'
  } : _ref$popperProps,
      containerCss = _ref.containerCss,
      className = _ref.className,
      renderTrigger = _ref.renderTrigger,
      onClose = _ref.onClose,
      isOpenOuter = _ref.isOpen,
      isControllable = _ref.isControllable,
      restProps = _objectWithoutProperties(_ref, _excluded);

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      isOpenInner = _useState2[0],
      setIsOpen = _useState2[1];

  var dialogRef = (0, _react.useRef)();
  var triggerRef = (0, _react.useRef)();
  var isOpen = !!(isControllable ? isOpenOuter : isOpenInner);
  var handleClose = isControllable && onClose ? onClose : function () {
    return setIsOpen(false);
  };

  var handleClickOutside = function handleClickOutside(event) {
    var _dialogRef$current, _triggerRef$current;

    if (!((_dialogRef$current = dialogRef.current) !== null && _dialogRef$current !== void 0 && _dialogRef$current.contains(event.target)) && !((_triggerRef$current = triggerRef.current) !== null && _triggerRef$current !== void 0 && _triggerRef$current.contains(event.target))) {
      handleClose();
    }
  };

  var correctedPopperProps = _objectSpread({
    strategy: 'fixed'
  }, popperProps);

  (0, _react.useEffect)(function () {
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside, false);
    } else {
      document.removeEventListener('mousedown', handleClickOutside, false);
    }

    return function () {
      document.removeEventListener('mousedown', handleClickOutside, false);
    };
  }, [isOpen]);
  return (0, _jsxRuntime.jsx)(_styled.InlineDialogContainer, {
    className: className,
    children: (0, _jsxRuntime.jsxs)(_reactPopper.Manager, {
      children: [(0, _jsxRuntime.jsx)(_reactPopper.Reference, {
        children: function children(_ref2) {
          var _ref3 = _ref2.ref;
          if (!renderTrigger) return null;
          var commonParams = {
            ref: function ref(node) {
              if (typeof _ref3 === 'function') _ref3(node);
              triggerRef.current = node;
            },
            onClick: isControllable ? function () {} : function () {
              return setIsOpen(!isOpen);
            },
            isOpen: isOpen
          };
          return renderTrigger(commonParams);
        }
      }), isOpen && (0, _jsxRuntime.jsx)(_reactPopper.Popper, _objectSpread(_objectSpread({}, correctedPopperProps), {}, {
        children: function children(_ref4) {
          var _ref5 = _ref4.ref,
              style = _ref4.style;
          return (0, _jsxRuntime.jsx)(_styled.Container, _objectSpread(_objectSpread({}, restProps), {}, {
            css: containerCss,
            ref: function ref(node) {
              if (typeof _ref5 === 'function') _ref5(node);
              dialogRef.current = node;
            },
            style: style,
            children: typeof _children === 'function' ? _children({
              isOpen: isOpen,
              onClose: handleClose
            }) : _children
          }));
        }
      }))]
    })
  });
}
