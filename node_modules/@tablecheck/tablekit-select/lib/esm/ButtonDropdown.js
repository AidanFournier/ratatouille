function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { Button } from '@tablecheck/tablekit-button';
import { useRef, useEffect } from 'react';
import { Select } from './Select.js';
import { jsx } from '@emotion/react/jsx-runtime';

var ControlComponent = function ControlComponent(_ref) {
  var selectProps = _ref.selectProps,
      innerRef = _ref.innerRef,
      menuIsOpen = _ref.menuIsOpen;
  var buttonRef = useRef();
  var buttonProps = selectProps.buttonProps;

  var handleClickOutside = function handleClickOutside(e) {
    if (buttonRef.current && e.target && buttonRef.current.contains(e.target)) {
      // inside click
      return;
    } // outside click


    if (selectProps.onMenuClose) {
      selectProps.onMenuClose();
    }
  };

  useEffect(function () {
    if (menuIsOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    } else {
      document.removeEventListener('mousedown', handleClickOutside);
    }

    return function () {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [menuIsOpen]);
  return jsx(Button, _objectSpread(_objectSpread({}, buttonProps), {}, {
    ref: function ref(element) {
      buttonRef.current = element;
      if (typeof innerRef === 'function') innerRef(element);
    },
    onClick: function onClick() {
      if (selectProps.menuIsOpen && selectProps.onMenuClose) {
        selectProps.onMenuClose();
      } else if (!selectProps.menuIsOpen && selectProps.onMenuOpen) {
        selectProps.onMenuOpen();
      }
    }
  }));
};

var ButtonDropdown = function ButtonDropdown(props) {
  var components = props.components;
  return jsx(Select, _objectSpread(_objectSpread({}, props), {}, {
    components: _objectSpread(_objectSpread({}, components), {}, {
      Control: ControlComponent
    }),
    isButtonDropDown: true
  }));
};

export { ButtonDropdown };
