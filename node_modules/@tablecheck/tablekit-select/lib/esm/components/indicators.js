function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { useTheme } from '@emotion/react';
import { Icon, getIcon, SuccessIcon, WarningIcon, DangerIcon } from '@tablecheck/tablekit-icon';
import { Spinner } from '@tablecheck/tablekit-spinner';
import { components } from 'react-select';
import { jsx } from '@emotion/react/jsx-runtime';

var ClearIndicator = function ClearIndicator(props) {
  return jsx(components.ClearIndicator, _objectSpread(_objectSpread({}, props), {}, {
    children: jsx(Icon, {
      icon: getIcon('close')
    })
  }));
};

var DropdownIndicator = function DropdownIndicator(props) {
  return jsx(components.DropdownIndicator, _objectSpread(_objectSpread({}, props), {}, {
    children: jsx(Icon, {
      icon: getIcon('chevronDown')
    })
  }));
};

var SuccessIndicator = function SuccessIndicator(props) {
  return jsx(components.DropdownIndicator, _objectSpread(_objectSpread({}, props), {}, {
    children: jsx(SuccessIcon, {})
  }));
};

var WarningIndicator = function WarningIndicator(props) {
  return jsx(components.DropdownIndicator, _objectSpread(_objectSpread({}, props), {}, {
    children: jsx(WarningIcon, {})
  }));
};

var ErrorIndicator = function ErrorIndicator(props) {
  return jsx(components.DropdownIndicator, _objectSpread(_objectSpread({}, props), {}, {
    children: jsx(DangerIcon, {})
  }));
};

var LoadingIndicator = function LoadingIndicator() {
  var theme = useTheme();
  return jsx(Spinner, {
    color: theme.colors.secondary
  });
};

export { ClearIndicator, DropdownIndicator, ErrorIndicator, LoadingIndicator, SuccessIndicator, WarningIndicator };
