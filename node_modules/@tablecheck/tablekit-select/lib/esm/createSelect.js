var _excluded = ["children"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { useTheme } from '@emotion/react';
import { InputSize } from '@tablecheck/tablekit-input';
import { CLASSIC_COLORS, BORDER_RADIUS, FieldHeight } from '@tablecheck/tablekit-theme';
import { getThemeValue } from '@tablecheck/tablekit-utils';
import { cloneElement } from 'react';
import { components, mergeStyles } from 'react-select';
import * as animatedComponents from 'react-select/animated';
import { baseStyles } from './baseStyles.js';
import * as index from './components/index.js';
import { IconContainer } from './styled.js';
import { selectThemeNamespace, selectClassicTheme } from './themes.js';
import { jsxs, jsx } from '@emotion/react/jsx-runtime';

var buildCachedComponents = function buildCachedComponents() {
  var components = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _objectSpread(_objectSpread(_objectSpread({}, animatedComponents), index), components);
};

function createSelect(WrappedComponent) {
  var Select = function Select(props) {
    var options = props.options,
        placeholder = props.placeholder,
        iconBefore = props.iconBefore,
        isDisabled = props.isDisabled,
        components$1 = props.components,
        isInvalid = props.isInvalid,
        isWarning = props.isWarning,
        isSuccess = props.isSuccess,
        _props$size = props.size,
        size = _props$size === void 0 ? InputSize.Regular : _props$size,
        styles = props.styles,
        onChange = props.onChange,
        shouldNotChangeDropdownIcon = props.shouldNotChangeDropdownIcon,
        name = props.name;
    var tablekitTheme = useTheme();
    var builtComponents = buildCachedComponents(components$1);

    if (!shouldNotChangeDropdownIcon && !isDisabled && isInvalid) {
      builtComponents.DropdownIndicator = builtComponents.ErrorIndicator;
    } else if (!shouldNotChangeDropdownIcon && !isDisabled && isWarning) {
      builtComponents.DropdownIndicator = builtComponents.WarningIndicator;
    } else if (!shouldNotChangeDropdownIcon && !isDisabled && isSuccess) {
      builtComponents.DropdownIndicator = builtComponents.SuccessIndicator;
    }

    if (iconBefore) {
      var Control = components.Control;

      builtComponents.Control = function (_ref) {
        var children = _ref.children,
            innerProps = _objectWithoutProperties(_ref, _excluded);

        return (// cant use reactSelectComponents.Control directly here as it will refer to the local
          // components instead of reactSelectComponents in build
          jsxs(Control, _objectSpread(_objectSpread({}, innerProps), {}, {
            children: [jsx(IconContainer, {
              size: size,
              children: /*#__PURE__*/cloneElement(iconBefore, {
                size: size
              })
            }), children]
          }))
        );
      };
    }

    var handleChange = function handleChange(value, actionMeta) {
      if (onChange) {
        onChange(value, _objectSpread(_objectSpread({}, actionMeta), {}, {
          name: name
        }));
      }
    }; // Used to merge our theme with the ReactSelect theme


    var getTheme = function getTheme(reactSelectTheme) {
      var _selectClassicTheme$c, _selectClassicTheme$o, _selectClassicTheme$o2;

      var safeTheme = {
        theme: _objectSpread(_objectSpread({}, tablekitTheme), {}, {
          colors: tablekitTheme.colors || CLASSIC_COLORS
        })
      };
      return _objectSpread(_objectSpread(_objectSpread({}, reactSelectTheme), tablekitTheme), {}, {
        borderRadius: BORDER_RADIUS,
        spacing: _objectSpread(_objectSpread({}, reactSelectTheme.spacing || {}), {}, {
          controlHeight: FieldHeight.Small
        }),
        colors: _objectSpread(_objectSpread(_objectSpread({}, safeTheme.theme.colors), tablekitTheme.colors), {}, {
          danger: tablekitTheme.colors.danger,
          dangerLight: tablekitTheme.colors.danger,
          neutral0: getThemeValue("".concat(selectThemeNamespace, ".common.backgroundColor"), selectClassicTheme === null || selectClassicTheme === void 0 ? void 0 : (_selectClassicTheme$c = selectClassicTheme.common) === null || _selectClassicTheme$c === void 0 ? void 0 : _selectClassicTheme$c.backgroundColor)(safeTheme),
          primary: tablekitTheme.colors.primary,
          primary75: tablekitTheme.colors.primary,
          primary50: getThemeValue("".concat(selectThemeNamespace, ".option.active.backgroundColor"), selectClassicTheme === null || selectClassicTheme === void 0 ? void 0 : (_selectClassicTheme$o = selectClassicTheme.option) === null || _selectClassicTheme$o === void 0 ? void 0 : (_selectClassicTheme$o2 = _selectClassicTheme$o.active) === null || _selectClassicTheme$o2 === void 0 ? void 0 : _selectClassicTheme$o2.backgroundColor)(safeTheme),
          primary25: tablekitTheme.colors.primary2
        })
      });
    };

    var tablekitStyles = baseStyles(tablekitTheme, isInvalid, isWarning, isSuccess);
    return (// TODO weird mismatch going on here in builtComponents
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      jsx(WrappedComponent, _objectSpread(_objectSpread({}, props), {}, {
        options: options,
        placeholder: placeholder,
        isDisabled: isDisabled,
        theme: getTheme,
        components: builtComponents,
        onChange: handleChange,
        styles: styles ? mergeStyles(tablekitStyles, styles) : tablekitStyles
      }))
    );
  };

  return Select;
}

export { createSelect };
