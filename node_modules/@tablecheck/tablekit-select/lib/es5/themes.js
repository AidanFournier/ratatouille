"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectThemeNamespace = exports.selectDarkTheme = exports.selectClassicTheme = void 0;

var _tablekitPackageNamespace = require("@tablecheck/tablekit-package-namespace");

var _chromaTablekit = _interopRequireDefault(require("chroma-js/chroma-tablekit"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var selectThemeNamespace = _tablekitPackageNamespace.PackageNamespace.Select;
exports.selectThemeNamespace = selectThemeNamespace;
var selectClassicTheme = {
  common: {
    backgroundColor: function backgroundColor(_ref) {
      var theme = _ref.theme;
      return theme.colors.surface;
    },
    borderColor: function borderColor(_ref2) {
      var theme = _ref2.theme;
      return theme.colors.border;
    }
  },
  option: {
    hovered: {
      backgroundColor: function backgroundColor(_ref3) {
        var theme = _ref3.theme;
        return theme.colors.hoverNeutralBackground;
      }
    },
    selected: {
      backgroundColor: function backgroundColor(_ref4) {
        var theme = _ref4.theme;
        return theme.colors.selectedBackground;
      },
      borderColor: function borderColor(_ref5) {
        var theme = _ref5.theme;
        return theme.colors.primary2;
      }
    },
    active: {
      backgroundColor: function backgroundColor(_ref6) {
        var theme = _ref6.theme;
        return _chromaTablekit.default.mix(theme.colors.selectedBackground, '#000000', 0.2).hex();
      }
    }
  },
  icon: {
    color: function color(_ref7) {
      var theme = _ref7.theme;
      return theme.colors.primary2;
    }
  },
  dropdownIndicator: {
    default: {
      color: function color(_ref8) {
        var theme = _ref8.theme;
        return theme.colors.primary2;
      }
    },
    focused: {
      color: function color(_ref9) {
        var theme = _ref9.theme;
        return theme.colors.primary2;
      }
    },
    hovered: {
      color: function color(_ref10) {
        var theme = _ref10.theme;
        return theme.colors.primary2Hover;
      }
    }
  },
  clearIndicator: {
    default: {
      color: function color(_ref11) {
        var theme = _ref11.theme;
        return theme.colors.primary2;
      }
    },
    focused: {
      color: function color(_ref12) {
        var theme = _ref12.theme;
        return theme.colors.primary2;
      }
    },
    hovered: {
      color: function color(_ref13) {
        var theme = _ref13.theme;
        return theme.colors.primary2Hover;
      }
    }
  }
};
exports.selectClassicTheme = selectClassicTheme;

var selectDarkTheme = _objectSpread(_objectSpread({}, selectClassicTheme), {}, {
  common: {
    backgroundColor: function backgroundColor(_ref14) {
      var theme = _ref14.theme;
      return theme.colors.surface;
    },
    borderColor: function borderColor(_ref15) {
      var theme = _ref15.theme;
      return theme.colors.border;
    }
  },
  option: {
    hovered: {
      backgroundColor: function backgroundColor(_ref16) {
        var theme = _ref16.theme;
        return theme.colors.hoverNeutralBackground;
      }
    },
    selected: {
      backgroundColor: function backgroundColor(_ref17) {
        var theme = _ref17.theme;
        return theme.colors.selectedBackground;
      },
      borderColor: function borderColor(_ref18) {
        var theme = _ref18.theme;
        return theme.colors.primary2;
      }
    },
    active: {
      backgroundColor: function backgroundColor(_ref19) {
        var theme = _ref19.theme;
        return _chromaTablekit.default.mix(theme.colors.selectedBackground, '#ffffff', 0.2).hex();
      }
    }
  }
});

exports.selectDarkTheme = selectDarkTheme;
