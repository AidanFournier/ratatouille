"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.baseStyles = baseStyles;

var _tablekitInput = require("@tablecheck/tablekit-input");

var _tablekitTheme = require("@tablecheck/tablekit-theme");

var _tablekitTypography = require("@tablecheck/tablekit-typography");

var _tablekitUtils = require("@tablecheck/tablekit-utils");

var _chromaTablekit = _interopRequireDefault(require("chroma-js/chroma-tablekit"));

var _themes = require("./themes.js");

var _inputSizes;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var inputSizes = (_inputSizes = {}, _defineProperty(_inputSizes, _tablekitInput.InputSize.Large, {
  height: _tablekitTheme.FieldHeight.Large,
  font: _tablekitTypography.Typography.Heading3,
  spacing: '18px'
}), _defineProperty(_inputSizes, _tablekitInput.InputSize.Regular, {
  height: _tablekitTheme.FieldHeight.Regular,
  font: _tablekitTypography.Typography.Heading4,
  spacing: _tablekitTheme.Spacing.L3
}), _defineProperty(_inputSizes, _tablekitInput.InputSize.Regular2, {
  height: _tablekitTheme.FieldHeight.Regular2,
  font: _tablekitTypography.Typography.Heading4,
  spacing: _tablekitTheme.Spacing.L3
}), _defineProperty(_inputSizes, _tablekitInput.InputSize.Small, {
  height: _tablekitTheme.FieldHeight.Small,
  font: _tablekitTypography.Typography.Heading4,
  spacing: '10px'
}), _inputSizes);

function getSizeStyles(size) {
  return inputSizes[size] || inputSizes[_tablekitInput.InputSize.Regular];
}

function baseStyles(theme, isInvalid, isWarning, isSuccess) {
  return {
    container: function container(css, _ref) {
      var _ref$selectProps = _ref.selectProps,
          shouldFitContainer = _ref$selectProps.shouldFitContainer,
          isButtonDropDown = _ref$selectProps.isButtonDropDown,
          width = _ref$selectProps.width,
          size = _ref$selectProps.size;

      var _getSizeStyles = getSizeStyles(size),
          height = _getSizeStyles.height;

      var styles = _objectSpread(_objectSpread({}, css), {}, {
        pointerEvents: 'auto',
        height: height
      }); // default styles inherited from react-select stretch the select out


      if (!shouldFitContainer && !isButtonDropDown) {
        styles.width = width ? _tablekitInput.INPUT_WIDTHS[width] : _tablekitInput.INPUT_WIDTHS[_tablekitTheme.Size.Regular];
      }

      return styles;
    },
    valueContainer: function valueContainer(css, _ref2) {
      var size = _ref2.selectProps.size;

      var _getSizeStyles2 = getSizeStyles(size),
          spacing = _getSizeStyles2.spacing;

      return _objectSpread(_objectSpread({}, css), {}, {
        padding: "0 ".concat(spacing),
        whiteSpace: 'nowrap'
      });
    },
    control: function control(css, props) {
      var _selectClassicTheme$c;

      var isFocused = props.isFocused,
          isDisabled = props.isDisabled,
          size = props.selectProps.size;
      var borderColor = (0, _tablekitUtils.getThemeValue)("".concat(_themes.selectThemeNamespace, ".common.borderColor"), _themes.selectClassicTheme === null || _themes.selectClassicTheme === void 0 ? void 0 : (_selectClassicTheme$c = _themes.selectClassicTheme.common) === null || _selectClassicTheme$c === void 0 ? void 0 : _selectClassicTheme$c.borderColor)({
        theme: theme
      });

      if (!isDisabled) {
        if (isFocused) borderColor = theme.colors.secondary;

        if (isInvalid) {
          borderColor = theme.colors.danger;
        } else if (isWarning) {
          borderColor = theme.colors.warning;
        } else if (isSuccess) {
          borderColor = theme.colors.success;
        }
      }

      var borderColorHover = theme.colors.primary;
      var isLargeBorder = isFocused || isInvalid || isSuccess || isWarning;
      var transitionDuration = '200ms';

      var _getSizeStyles3 = getSizeStyles(size),
          height = _getSizeStyles3.height,
          font = _getSizeStyles3.font;

      return _objectSpread(_objectSpread({}, css), {}, {
        borderColor: borderColor,
        borderStyle: 'solid',
        borderWidth: isLargeBorder ? 2 : 1,
        boxShadow: 'none',
        padding: isLargeBorder ? 0 : 1,
        minHeight: height,
        fontSize: font.fontSize,
        lineHeight: font.lineHeight,
        opacity: isDisabled ? 0.5 : 1,
        pointerEvents: isDisabled ? 'none' : 'auto',
        transition: "background-color ".concat(transitionDuration, " ease-in-out,\n        border-color ").concat(transitionDuration, " ease-in-out"),
        color: theme.colors.text,
        cursor: isDisabled ? 'not-allowed' : 'pointer',
        ':hover': {
          borderColor: borderColorHover,
          borderWidth: 2,
          padding: 0
        }
      });
    },
    dropdownIndicator: function dropdownIndicator(css, _ref3) {
      var _selectClassicTheme$d, _selectClassicTheme$d2, _selectClassicTheme$d3, _selectClassicTheme$d4, _selectClassicTheme$d5, _selectClassicTheme$d6;

      var isFocused = _ref3.isFocused,
          size = _ref3.selectProps.size;
      var defaultColor = (0, _tablekitUtils.getThemeValue)("".concat(_themes.selectThemeNamespace, ".dropdownIndicator.default.color"), _themes.selectClassicTheme === null || _themes.selectClassicTheme === void 0 ? void 0 : (_selectClassicTheme$d = _themes.selectClassicTheme.dropdownIndicator) === null || _selectClassicTheme$d === void 0 ? void 0 : (_selectClassicTheme$d2 = _selectClassicTheme$d.default) === null || _selectClassicTheme$d2 === void 0 ? void 0 : _selectClassicTheme$d2.color)({
        theme: theme
      });
      var focusedColor = (0, _tablekitUtils.getThemeValue)("".concat(_themes.selectThemeNamespace, ".dropdownIndicator.focused.color"), _themes.selectClassicTheme === null || _themes.selectClassicTheme === void 0 ? void 0 : (_selectClassicTheme$d3 = _themes.selectClassicTheme.dropdownIndicator) === null || _selectClassicTheme$d3 === void 0 ? void 0 : (_selectClassicTheme$d4 = _selectClassicTheme$d3.focused) === null || _selectClassicTheme$d4 === void 0 ? void 0 : _selectClassicTheme$d4.color)({
        theme: theme
      });
      var hoveredColor = (0, _tablekitUtils.getThemeValue)("".concat(_themes.selectThemeNamespace, ".dropdownIndicator.hovered.color"), _themes.selectClassicTheme === null || _themes.selectClassicTheme === void 0 ? void 0 : (_selectClassicTheme$d5 = _themes.selectClassicTheme.dropdownIndicator) === null || _selectClassicTheme$d5 === void 0 ? void 0 : (_selectClassicTheme$d6 = _selectClassicTheme$d5.hovered) === null || _selectClassicTheme$d6 === void 0 ? void 0 : _selectClassicTheme$d6.color)({
        theme: theme
      });

      var _getSizeStyles4 = getSizeStyles(size),
          spacing = _getSizeStyles4.spacing;

      return _objectSpread(_objectSpread({}, css), {}, {
        padding: "0 ".concat(spacing),
        color: isFocused ? focusedColor : defaultColor,
        ':hover': {
          color: hoveredColor
        }
      });
    },
    clearIndicator: function clearIndicator(css, _ref4) {
      var _selectClassicTheme$c2, _selectClassicTheme$c3, _selectClassicTheme$c4, _selectClassicTheme$c5, _selectClassicTheme$c6, _selectClassicTheme$c7;

      var isFocused = _ref4.isFocused;
      var defaultColor = (0, _tablekitUtils.getThemeValue)("".concat(_themes.selectThemeNamespace, ".clearIndicator.default.color"), _themes.selectClassicTheme === null || _themes.selectClassicTheme === void 0 ? void 0 : (_selectClassicTheme$c2 = _themes.selectClassicTheme.clearIndicator) === null || _selectClassicTheme$c2 === void 0 ? void 0 : (_selectClassicTheme$c3 = _selectClassicTheme$c2.default) === null || _selectClassicTheme$c3 === void 0 ? void 0 : _selectClassicTheme$c3.color)({
        theme: theme
      });
      var focusedColor = (0, _tablekitUtils.getThemeValue)("".concat(_themes.selectThemeNamespace, ".clearIndicator.focused.color"), _themes.selectClassicTheme === null || _themes.selectClassicTheme === void 0 ? void 0 : (_selectClassicTheme$c4 = _themes.selectClassicTheme.clearIndicator) === null || _selectClassicTheme$c4 === void 0 ? void 0 : (_selectClassicTheme$c5 = _selectClassicTheme$c4.focused) === null || _selectClassicTheme$c5 === void 0 ? void 0 : _selectClassicTheme$c5.color)({
        theme: theme
      });
      var hoveredColor = (0, _tablekitUtils.getThemeValue)("".concat(_themes.selectThemeNamespace, ".clearIndicator.hovered.color"), _themes.selectClassicTheme === null || _themes.selectClassicTheme === void 0 ? void 0 : (_selectClassicTheme$c6 = _themes.selectClassicTheme.clearIndicator) === null || _selectClassicTheme$c6 === void 0 ? void 0 : (_selectClassicTheme$c7 = _selectClassicTheme$c6.hovered) === null || _selectClassicTheme$c7 === void 0 ? void 0 : _selectClassicTheme$c7.color)({
        theme: theme
      });
      return _objectSpread(_objectSpread({}, css), {}, {
        color: isFocused ? focusedColor : defaultColor,
        ':hover': {
          color: hoveredColor
        }
      });
    },
    option: function option(css, _ref5) {
      var data = _ref5.data,
          isDisabled = _ref5.isDisabled,
          isFocused = _ref5.isFocused,
          isSelected = _ref5.isSelected,
          size = _ref5.selectProps.size;

      var _getSizeStyles5 = getSizeStyles(size),
          font = _getSizeStyles5.font;

      var styles = _objectSpread(_objectSpread({}, css), {}, {
        fontSize: font.fontSize,
        lineHeight: font.lineHeight,
        cursor: isDisabled ? 'not-allowed' : 'pointer',
        opacity: isDisabled ? 0.5 : 1
      });

      if (data.color) {
        var tagColor = data.color;

        if (isSelected) {
          return _objectSpread(_objectSpread({}, styles), {}, {
            backgroundColor: _chromaTablekit.default.mix(tagColor, _tablekitTheme.COLORS.PURPLE.L1, 0.6).css(),
            color: theme.colors.text
          });
        }

        if (isFocused) {
          var activeBackgroundChroma = (0, _chromaTablekit.default)(tagColor).brighten(0.4).alpha(0.4);
          var activeColor = (0, _chromaTablekit.default)(tagColor);
          return _objectSpread(_objectSpread({}, styles), {}, {
            backgroundColor: activeBackgroundChroma.css(),
            color: activeColor
          });
        }

        return _objectSpread(_objectSpread({}, styles), {}, {
          color: tagColor
        });
      }

      var backgroundColor;
      var boxShadow;

      if (isSelected) {
        var _selectClassicTheme$o, _selectClassicTheme$o2, _selectClassicTheme$o3, _selectClassicTheme$o4;

        backgroundColor = (0, _tablekitUtils.getThemeValue)("".concat(_themes.selectThemeNamespace, ".option.selected.backgroundColor"), _themes.selectClassicTheme === null || _themes.selectClassicTheme === void 0 ? void 0 : (_selectClassicTheme$o = _themes.selectClassicTheme.option) === null || _selectClassicTheme$o === void 0 ? void 0 : (_selectClassicTheme$o2 = _selectClassicTheme$o.selected) === null || _selectClassicTheme$o2 === void 0 ? void 0 : _selectClassicTheme$o2.backgroundColor)({
          theme: theme
        });
        var borderColor = (0, _tablekitUtils.getThemeValue)("".concat(_themes.selectThemeNamespace, ".option.selected.borderColor"), _themes.selectClassicTheme === null || _themes.selectClassicTheme === void 0 ? void 0 : (_selectClassicTheme$o3 = _themes.selectClassicTheme.option) === null || _selectClassicTheme$o3 === void 0 ? void 0 : (_selectClassicTheme$o4 = _selectClassicTheme$o3.selected) === null || _selectClassicTheme$o4 === void 0 ? void 0 : _selectClassicTheme$o4.borderColor)({
          theme: theme
        });
        boxShadow = "inset 3px 0 0 -1px ".concat(borderColor);
      } else if (isFocused && !isDisabled) {
        var _selectClassicTheme$o5, _selectClassicTheme$o6;

        backgroundColor = (0, _tablekitUtils.getThemeValue)("".concat(_themes.selectThemeNamespace, ".option.hovered.backgroundColor"), _themes.selectClassicTheme === null || _themes.selectClassicTheme === void 0 ? void 0 : (_selectClassicTheme$o5 = _themes.selectClassicTheme.option) === null || _selectClassicTheme$o5 === void 0 ? void 0 : (_selectClassicTheme$o6 = _selectClassicTheme$o5.hovered) === null || _selectClassicTheme$o6 === void 0 ? void 0 : _selectClassicTheme$o6.backgroundColor)({
          theme: theme
        });
      }

      if (!isDisabled) {
        var _selectClassicTheme$o7, _selectClassicTheme$o8;

        // override the active state not to show primary background color on :selected:active
        var activeBackgroundColor = (0, _tablekitUtils.getThemeValue)("".concat(_themes.selectThemeNamespace, ".option.active.backgroundColor"), _themes.selectClassicTheme === null || _themes.selectClassicTheme === void 0 ? void 0 : (_selectClassicTheme$o7 = _themes.selectClassicTheme.option) === null || _selectClassicTheme$o7 === void 0 ? void 0 : (_selectClassicTheme$o8 = _selectClassicTheme$o7.active) === null || _selectClassicTheme$o8 === void 0 ? void 0 : _selectClassicTheme$o8.backgroundColor)({
          theme: theme
        });
        styles[':active'] = styles[':active'] || {};
        styles[':active'].backgroundColor = isSelected ? backgroundColor : activeBackgroundColor;
      }

      return _objectSpread(_objectSpread({}, styles), {}, {
        backgroundColor: backgroundColor,
        color: theme.colors.text,
        boxShadow: boxShadow
      });
    },
    placeholder: function placeholder(css, _ref6) {
      var size = _ref6.selectProps.size;

      var _getSizeStyles6 = getSizeStyles(size),
          spacing = _getSizeStyles6.spacing;

      return _objectSpread(_objectSpread({}, css), {}, {
        maxWidth: "calc(100% - ".concat(spacing, ")"),
        color: theme.colors.text
      });
    },
    singleValue: function singleValue(css, _ref7) {
      var size = _ref7.selectProps.size;

      var _getSizeStyles7 = getSizeStyles(size),
          spacing = _getSizeStyles7.spacing;

      return _objectSpread(_objectSpread({}, css), {}, {
        maxWidth: "calc(100% - ".concat(spacing, ")"),
        color: theme.colors.text
      });
    },
    menu: function menu(css, _ref8) {
      var _ref8$selectProps = _ref8.selectProps,
          isButtonDropDown = _ref8$selectProps.isButtonDropDown,
          width = _ref8$selectProps.width;

      var styles = _objectSpread(_objectSpread({}, css), {}, {
        marginTop: '1px',
        color: theme.colors.text
      });

      if (isButtonDropDown) {
        styles.width = width ? _tablekitInput.INPUT_WIDTHS[width] : _tablekitInput.INPUT_WIDTHS[_tablekitTheme.Size.Regular];
      }

      return styles;
    },
    multiValueRemove: function multiValueRemove(css) {
      return _objectSpread(_objectSpread({}, css), {}, {
        ':hover': {
          backgroundColor: theme.colors.hoverNeutralBackground,
          color: theme.colors.text
        }
      });
    },
    multiValueLabel: function multiValueLabel(css) {
      return _objectSpread(_objectSpread({}, css), _tablekitTypography.Typography.Heading4);
    }
  };
}
