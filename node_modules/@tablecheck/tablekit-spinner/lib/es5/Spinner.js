"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Spinner = Spinner;

var _SpinnerSvg = require("./components/SpinnerSvg.js");

var _styledContainer = require("./components/styledContainer.js");

var _types = require("./types.js");

var _jsxRuntime = require("@emotion/react/jsx-runtime");

var _excluded = ["className", "size"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function Spinner(_ref) {
  var className = _ref.className,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? _types.SpinnerSize.Regular : _ref$size,
      restProps = _objectWithoutProperties(_ref, _excluded);

  return (0, _jsxRuntime.jsx)(_styledContainer.SpinnerOuter, _objectSpread(_objectSpread({}, restProps), {}, {
    className: className,
    size: size,
    children: (0, _jsxRuntime.jsx)(_styledContainer.SpinnerContainer, {
      size: size,
      children: (0, _jsxRuntime.jsx)(_SpinnerSvg.SpinnerSvg, {
        focusable: "false",
        viewBox: "0 0 100 100",
        xmlns: "http://www.w3.org/2000/svg",
        children: (0, _jsxRuntime.jsx)("circle", {
          cx: "50",
          cy: "50",
          r: "45"
        })
      })
    })
  }));
}
