import * as React from 'react';
import { BaseItemProps, ItemProps } from './types';
interface ItemTypeBase extends React.Component {
    <Component extends React.ElementType, ItemElement extends HTMLElement = HTMLSpanElement>(props: ItemProps<Component> & {
        ref?: React.Ref<ItemElement>;
    }): React.ReactElement | null;
    <ItemElement extends HTMLElement = HTMLSpanElement>(props: React.PropsWithRef<BaseItemProps> & React.HTMLAttributes<ItemElement>): React.ReactElement | null;
}
interface ItemWithComponent<Component extends React.ElementType> extends React.Component {
    (props: Omit<React.ComponentPropsWithRef<Component> & BaseItemProps, 'component'>): React.ReactElement | null;
}
interface ItemType extends ItemTypeBase {
    withComponent<NewComponent extends React.ElementType>(newComponent: NewComponent): ItemWithComponent<NewComponent>;
}
export declare const Item: ItemType;
export {};
