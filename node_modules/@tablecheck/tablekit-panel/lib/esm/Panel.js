var _excluded = ["className", "isOpen", "children", "togglePanel", "onClickOutside", "shouldDisableBodyScroll", "position", "width", "height"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { forwardRef, useRef, useEffect } from 'react';
import { StaticContainer } from './styled/StaticPanel.js';
import { PanelPosition } from './types.js';
import { useBodyScrollLock } from './useBodyScrollLock.js';
import { jsxs } from '@emotion/react/jsx-runtime';
var Panel = /*#__PURE__*/forwardRef(function (_ref, _ref2) {
  var className = _ref.className,
      isOpen = _ref.isOpen,
      children = _ref.children,
      togglePanel = _ref.togglePanel,
      onClickOutside = _ref.onClickOutside,
      _ref$shouldDisableBod = _ref.shouldDisableBodyScroll,
      shouldDisableBodyScroll = _ref$shouldDisableBod === void 0 ? false : _ref$shouldDisableBod,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? PanelPosition.Right : _ref$position,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? '100%' : _ref$width,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? '100%' : _ref$height,
      restProps = _objectWithoutProperties(_ref, _excluded);

  var containerRef = useRef(null);
  var observer = useBodyScrollLock({
    shouldDisableBodyScroll: shouldDisableBodyScroll,
    containerRef: containerRef,
    isOpen: isOpen
  });
  useEffect(function () {
    var listener = onClickOutside ? function (event) {
      if (event.target instanceof Node && containerRef.current && !containerRef.current.contains(event.target)) {
        onClickOutside(event, togglePanel);
      }
    } : null;

    if (isOpen && listener) {
      document.addEventListener('mousedown', listener);
    }

    return function () {
      if (listener) {
        document.removeEventListener('mousedown', listener);
      }
    };
  }, [onClickOutside, isOpen, togglePanel]);
  return jsxs(StaticContainer, _objectSpread(_objectSpread({}, restProps), {}, {
    className: className,
    isOpen: isOpen,
    position: position,
    onClick: function onClick(ev) {
      return ev.stopPropagation();
    },
    width: width,
    height: height,
    "data-ignore": "scroll-lock-ignore",
    ref: function ref(element) {
      containerRef.current = element;

      if (_ref2) {
        if (typeof _ref2 === 'function') {
          _ref2(element);
        } else {
          _ref2.current = element;
        }
      }
    },
    children: [isOpen && children, observer]
  }));
});
export { Panel };
