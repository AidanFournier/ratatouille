"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResizablePanel = void 0;

var _react = require("react");

var _ResizablePanel = require("./styled/ResizablePanel.js");

var _themes = require("./themes.js");

var _types = require("./types.js");

var _useBodyScrollLock = require("./useBodyScrollLock.js");

var _jsxRuntime = require("@emotion/react/jsx-runtime");

var ResizablePanel = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, _ref2) {
  var className = _ref.className,
      isOpen = _ref.isOpen,
      children = _ref.children,
      togglePanel = _ref.togglePanel,
      onClickOutside = _ref.onClickOutside,
      _ref$shouldDisableBod = _ref.shouldDisableBodyScroll,
      shouldDisableBodyScroll = _ref$shouldDisableBod === void 0 ? false : _ref$shouldDisableBod,
      _ref$maxHeight = _ref.maxHeight,
      maxHeight = _ref$maxHeight === void 0 ? _themes.defaultMaxHeight : _ref$maxHeight,
      _ref$maxWidth = _ref.maxWidth,
      maxWidth = _ref$maxWidth === void 0 ? _themes.defaultMaxWidth : _ref$maxWidth,
      _ref$minHeight = _ref.minHeight,
      minHeight = _ref$minHeight === void 0 ? _themes.baseDefaultHeight : _ref$minHeight,
      _ref$minWidth = _ref.minWidth,
      minWidth = _ref$minWidth === void 0 ? _themes.baseDefaultWidth : _ref$minWidth,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? _types.PanelPosition.Right : _ref$position,
      _ref$defaultHeight = _ref.defaultHeight,
      defaultHeight = _ref$defaultHeight === void 0 ? _themes.baseDefaultHeight : _ref$defaultHeight,
      _ref$defaultWidth = _ref.defaultWidth,
      defaultWidth = _ref$defaultWidth === void 0 ? _themes.baseDefaultWidth : _ref$defaultWidth;
  var resizeDirections = (0, _react.useMemo)(function () {
    return {
      top: position === 'bottom',
      right: position === 'left',
      bottom: position === 'top',
      left: position === 'right',
      topRight: false,
      bottomRight: false,
      bottomLeft: false,
      topLeft: false
    };
  }, [position]);
  var containerRef = (0, _react.useRef)(null);
  var observer = (0, _useBodyScrollLock.useBodyScrollLock)({
    shouldDisableBodyScroll: shouldDisableBodyScroll,
    containerRef: containerRef,
    isOpen: isOpen
  });
  (0, _react.useEffect)(function () {
    var listener = onClickOutside ? function (event) {
      var domContainer = containerRef.current;

      if (event.target instanceof Node && domContainer && !domContainer.contains(event.target)) {
        onClickOutside(event, togglePanel);
      }
    } : null;

    if (isOpen && listener) {
      document.addEventListener('mousedown', listener);
    }

    return function () {
      if (listener) {
        document.removeEventListener('mousedown', listener);
      }
    };
  }, [containerRef, onClickOutside, isOpen, togglePanel]);
  var defaultSize = position === _types.PanelPosition.Bottom || position === _types.PanelPosition.Top ? {
    height: defaultHeight,
    width: '100% !important'
  } : {
    width: defaultWidth,
    height: '100% important'
  };
  return (0, _jsxRuntime.jsxs)(_ResizablePanel.ResizablePanelContainer, {
    className: className,
    enable: resizeDirections,
    isOpen: isOpen,
    position: position,
    defaultSize: defaultSize,
    minWidth: minWidth,
    maxWidth: position === _types.PanelPosition.Bottom || position === _types.PanelPosition.Top ? 'auto' : maxWidth,
    minHeight: minHeight,
    maxHeight: maxHeight,
    onClick: function onClick(ev) {
      return ev.stopPropagation();
    },
    handleWrapperClass: "resizer",
    "data-ignore": "scroll-lock-ignore",
    ref: function ref(element) {
      containerRef.current = (element === null || element === void 0 ? void 0 : element.resizable) || null;

      if (_ref2) {
        if (typeof _ref2 === 'function') {
          _ref2(element);
        } else {
          _ref2.current = element;
        }
      }
    },
    children: [isOpen && children, observer]
  });
});
exports.ResizablePanel = ResizablePanel;
