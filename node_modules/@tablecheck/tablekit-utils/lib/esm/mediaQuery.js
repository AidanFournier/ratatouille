import { css } from '@emotion/react';
import isFunction from 'lodash/isFunction';
import isObject from 'lodash/isObject';
import isString from 'lodash/isString';
import { propsEvalOrReturn } from './propsEvalOrReturn.js';

function mediaQuery(queriesOrGetter, renderer, defaultQueriesOrValue) {
  return function (props) {
    var queries = queriesOrGetter;

    if (isFunction(queriesOrGetter)) {
      queries = queriesOrGetter(props);
    } else if (isString(queriesOrGetter)) {
      queries = props[queriesOrGetter];
    }

    if (!queries && defaultQueriesOrValue) {
      if (!isObject(defaultQueriesOrValue)) {
        return propsEvalOrReturn(renderer(defaultQueriesOrValue), props);
      }

      queries = defaultQueriesOrValue;
    } // This handles if the prop value is _not_ being used as a media query object


    if (!isObject(queries)) {
      return propsEvalOrReturn(renderer(queries), props);
    }

    var mediaQueries = Object.keys(queries);
    var cssMediaQueries = [];
    var defaultQueryValue;

    for (var i = 0; i < mediaQueries.length; i += 1) {
      var query = mediaQueries[i];

      if (query === 'default') {
        defaultQueryValue = queries[query];
      } else {
        var queryString = query;

        if (queryString.indexOf('(') === -1) {
          queryString = "(".concat(query, ")");
        }

        cssMediaQueries.push( /*#__PURE__*/css("@media ", queryString, "{", propsEvalOrReturn(renderer(queries[query]), props) || '', ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:mediaQuery;")));
      }
    }

    var defaultStyles = '';

    if (defaultQueryValue) {
      defaultStyles = propsEvalOrReturn(renderer(defaultQueryValue), props) || '';
    }

    if (defaultStyles) {
      cssMediaQueries.unshift( /*#__PURE__*/css(defaultStyles, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:mediaQuery;")));
    }

    return /*#__PURE__*/css.apply(void 0, cssMediaQueries);
  };
}

export { mediaQuery };
