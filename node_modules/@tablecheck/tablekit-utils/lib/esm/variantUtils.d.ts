import { Theme } from '@emotion/react';
export declare type VariantKeyType = string | number | symbol;
export declare const identity: (x: unknown) => unknown;
export declare const is: (n: unknown) => boolean;
export declare const num: (n: unknown) => boolean;
export declare const string: (n: unknown) => boolean;
export declare const obj: (n: unknown) => boolean;
export declare const func: (n: unknown) => boolean;
export declare const negative: (n: unknown) => boolean;
export declare const get: (from: undefined | Record<string, unknown> | unknown[], path: string) => unknown;
export declare const merge: <RecordLeft extends Record<string, unknown> = Record<string, unknown>, RecordRight extends Record<string, unknown> = Record<string, unknown>>(acc: RecordLeft, item: void | RecordRight | null) => RecordLeft | (RecordLeft & RecordRight);
export declare const warn: (condition: boolean, message: string) => void;
export declare const cascade: <Return extends unknown>(fn: unknown, ...args: unknown[]) => Return;
export declare const getValue: <Return extends unknown, Props extends Record<string, unknown> = Record<string, unknown>>(props: Props, path: VariantKeyType, initial?: {}) => Return;
export declare const getThemeValue: <Return extends unknown, Props extends {
    theme: Theme;
} = {
    theme: Theme;
}>(props: Props, path: VariantKeyType, initial?: Theme) => Return;
