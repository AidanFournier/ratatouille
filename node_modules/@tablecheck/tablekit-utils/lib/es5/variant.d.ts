import { Theme } from '@emotion/react';
import { CSSInterpolation } from '@emotion/serialize';
import { MediaQueryGetter } from './mediaQuery';
import { VariantKeyType } from './variantUtils';
interface BaseProps {
}
export declare type VariantProps<Props extends BaseProps> = Props & {
    useVariantAsClass?: string | string[];
};
declare type BasePropsWithTheme = {
    theme: Theme;
};
interface Arguments<VariantKeys extends VariantKeyType, Value extends CSSInterpolation, Props extends VariantProps<BasePropsWithTheme>, PropGetter extends MediaQueryGetter<Value, Props>> {
    default?: VariantKeys;
    key?: string | null | undefined;
    prop: PropGetter;
    variants: {
        [key in VariantKeys]: Value | ((props: Props) => Value);
    };
}
export declare function variant<VariantKeys extends VariantKeyType, Value extends CSSInterpolation, PropsArgument extends BaseProps>(parameters: Arguments<VariantKeys, Value, PropsArgument & BasePropsWithTheme, keyof PropsArgument>): (props: VariantProps<PropsArgument & BasePropsWithTheme>) => CSSInterpolation;
export {};
