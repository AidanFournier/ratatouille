"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.variant = variant;

var _react = require("@emotion/react");

var _mediaQuery = require("./mediaQuery.js");

var _propsEvalOrReturn = require("./propsEvalOrReturn.js");

var _variantUtils = require("./variantUtils.js");

// forked from https://github.com/smooth-code/xstyled/blob/master/packages/system/src/variant.js
function evaluateVariant(props, parameters, resolvedValue) {
  var key = parameters.key,
      defaultValue = parameters.default,
      variants = parameters.variants;
  var value = resolvedValue || defaultValue;
  var themeVariants = (0, _variantUtils.is)(key) ? (0, _variantUtils.getThemeValue)(props, key) : {};
  var computedVariants = (0, _variantUtils.merge)(variants, themeVariants);
  var result;

  if (value) {
    result = (0, _variantUtils.getValue)(props, value, computedVariants);

    if (!(0, _variantUtils.is)(result) && defaultValue && value !== defaultValue) {
      result = (0, _variantUtils.getValue)(props, defaultValue, computedVariants);
    }
  }

  (0, _variantUtils.warn)((0, _variantUtils.is)(result), "variant \"".concat(value || 'undefined', "\" not found"));
  return (0, _propsEvalOrReturn.propsEvalOrReturn)(result, props);
}

function variant(parameters) {
  var _parameters$key = parameters.key,
      key = _parameters$key === void 0 ? null : _parameters$key,
      _parameters$default = parameters.default,
      defaultValue = _parameters$default === void 0 ? 'default' : _parameters$default,
      _parameters$variants = parameters.variants,
      variants = _parameters$variants === void 0 ? {} : _parameters$variants,
      prop = parameters.prop;
  return function (props) {
    var themeVariants = (0, _variantUtils.is)(key) ? (0, _variantUtils.getThemeValue)(props, key) : {};
    var computedVariants = (0, _variantUtils.merge)(variants, themeVariants);

    if (props.useVariantAsClass) {
      var isClassProp = typeof props.useVariantAsClass === 'string' && props.useVariantAsClass === prop;

      if (Array.isArray(props.useVariantAsClass)) {
        isClassProp = props.useVariantAsClass.indexOf(prop) > -1;
      }

      if (isClassProp) {
        var allKeys = Object.keys(computedVariants);
        var defaultSelector = allKeys.reduce(function (selector, variantKey) {
          var newString = '';

          if (variantKey !== defaultValue) {
            newString = ":not(.".concat(variantKey, ")");
          }

          return selector + newString;
        }, '');
        var classes = allKeys.map(function (variantKey) {
          return variantKey === defaultValue ? /*#__PURE__*/(0, _react.css)("&", defaultSelector, "{", (0, _propsEvalOrReturn.propsEvalOrReturn)(computedVariants[variantKey], props), ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:classes;")) : /*#__PURE__*/(0, _react.css)("&.", variantKey, "{", (0, _propsEvalOrReturn.propsEvalOrReturn)(computedVariants[variantKey], props), ";}" + (process.env.NODE_ENV === "production" ? "" : ";label:classes;"));
        });
        return /*#__PURE__*/(0, _react.css)(classes, process.env.NODE_ENV === "production" ? "" : ";label:variant;");
      }
    }

    return (0, _mediaQuery.mediaQuery)(prop, function (value) {
      return evaluateVariant(props, parameters, value);
    })(props);
  };
}
