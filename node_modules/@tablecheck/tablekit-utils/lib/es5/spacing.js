"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.margin = margin;
exports.padding = padding;
exports.parseSpacing = parseSpacing;

var _react = require("@emotion/react");

var _isObject = _interopRequireDefault(require("lodash/isObject"));

var _ifRtl2 = require("./ifRtl.js");

var _propsEvalOrReturn = require("./propsEvalOrReturn.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parseSpacing(value) {
  if (value === undefined) return 'inherit';
  if (typeof value === 'string') return value;
  return "".concat(value, "px");
}

function spacing(property, argumentSpacingValue) {
  return function (props) {
    var spacingValue = (0, _propsEvalOrReturn.propsEvalOrReturn)(argumentSpacingValue, props);
    var top;
    var bottom;
    var left;
    var right;

    if (!(0, _isObject.default)(spacingValue)) {
      top = spacingValue;
      bottom = spacingValue;
      left = spacingValue;
      right = spacingValue;
    } else {
      top = spacingValue.top;
      bottom = spacingValue.bottom;
      right = spacingValue.right;
      left = spacingValue.left;
    }

    var args = [];

    if (top === bottom && bottom === right && right === left) {
      // this is to stop the babel plugin from re-writing the call with classes etc
      args.push("".concat(property, ":").concat(parseSpacing(top), ";"));
    } else {
      var _ifRtl = (0, _ifRtl2.ifRtl)({
        left: right,
        right: left
      }, {
        left: left,
        right: right
      })(props),
          leftSpacing = _ifRtl.left,
          rightSpacing = _ifRtl.right;

      if (top !== undefined) {
        args.push("".concat(property, "-top:").concat(parseSpacing(top), ";"));
      }

      if (rightSpacing !== undefined) {
        args.push("".concat(property, "-right:").concat(parseSpacing(rightSpacing), ";"));
      }

      if (bottom !== undefined) {
        args.push("".concat(property, "-bottom:").concat(parseSpacing(bottom), ";"));
      }

      if (leftSpacing !== undefined) {
        args.push("".concat(property, "-left:").concat(parseSpacing(leftSpacing), ";"));
      }
    }

    return /*#__PURE__*/_react.css.apply(void 0, args);
  };
}

function padding(value) {
  return spacing('padding', value);
}

function margin(value) {
  return spacing('margin', value);
}
