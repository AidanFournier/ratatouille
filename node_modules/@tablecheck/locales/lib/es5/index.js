"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDefaultLocale = getDefaultLocale;
exports.isCJKLocale = isCJKLocale;
exports.orderLocales = orderLocales;
Object.defineProperty(exports, "LocaleCode", {
  enumerable: true,
  get: function get() {
    return _types.LocaleCode;
  }
});
exports.orderedLocales = exports.ordered = exports.locales = void 0;

var _arabic = require("./localeDefinitions/arabic.js");

var _chineseSimplified = require("./localeDefinitions/chineseSimplified.js");

var _chineseTraditional = require("./localeDefinitions/chineseTraditional.js");

var _english = require("./localeDefinitions/english.js");

var _french = require("./localeDefinitions/french.js");

var _german = require("./localeDefinitions/german.js");

var _indonesian = require("./localeDefinitions/indonesian.js");

var _italian = require("./localeDefinitions/italian.js");

var _japanese = require("./localeDefinitions/japanese.js");

var _korean = require("./localeDefinitions/korean.js");

var _lao = require("./localeDefinitions/lao.js");

var _malay = require("./localeDefinitions/malay.js");

var _portuguese = require("./localeDefinitions/portuguese.js");

var _russian = require("./localeDefinitions/russian.js");

var _spanish = require("./localeDefinitions/spanish.js");

var _tagalog = require("./localeDefinitions/tagalog.js");

var _thai = require("./localeDefinitions/thai.js");

var _turkish = require("./localeDefinitions/turkish.js");

var _vietnamese = require("./localeDefinitions/vietnamese.js");

var _types = require("./types.js");

var _locales;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Priority ordered array of locales
 */
var ordered = [_english.english, _japanese.japanese, _korean.korean, _chineseSimplified.chineseSimplified, _chineseTraditional.chineseTraditional, _german.german, _spanish.spanish, _french.french, _italian.italian, _indonesian.indonesian, _malay.malay, _portuguese.portuguese, _russian.russian, _tagalog.tagalog, _thai.thai, _lao.lao, _vietnamese.vietnamese, _arabic.arabic];
/**
 * Returns the correct default locale
 */

exports.ordered = ordered;

function getDefaultLocale(selectableLocales) {
  var locales = selectableLocales ? ordered.filter(function (item) {
    return selectableLocales.find(function (locale) {
      return locale === item.code;
    });
  }) : ordered;
  var englishLocale = locales.find(function (locale) {
    return locale.code === _types.LocaleCode.English;
  });
  if (englishLocale) return englishLocale;
  var japaneseLocale = locales.find(function (locale) {
    return locale.code === _types.LocaleCode.Japanese;
  });
  if (japaneseLocale) return japaneseLocale;
  return locales[0];
}
/**
 * Priority ordered array of LocaleCodes
 */


var orderedLocales = ordered.map(function (locale) {
  return locale.code;
});
/**
 * Re-order and filter a list of locales to match the default order
 * @param locales
 */

exports.orderedLocales = orderedLocales;

function orderLocales(locales) {
  return orderedLocales.filter(function (locale) {
    return locales.indexOf(locale) >= 0;
  });
}
/**
 * All locales
 * @type {Object} keys are locale codes, values are Locale objects
 */


var locales = (_locales = {}, _defineProperty(_locales, _types.LocaleCode.English, _english.english), _defineProperty(_locales, _types.LocaleCode.Japanese, _japanese.japanese), _defineProperty(_locales, _types.LocaleCode.Korean, _korean.korean), _defineProperty(_locales, _types.LocaleCode.ChineseSimplified, _chineseSimplified.chineseSimplified), _defineProperty(_locales, _types.LocaleCode.ChineseTraditional, _chineseTraditional.chineseTraditional), _defineProperty(_locales, _types.LocaleCode.German, _german.german), _defineProperty(_locales, _types.LocaleCode.Spanish, _spanish.spanish), _defineProperty(_locales, _types.LocaleCode.French, _french.french), _defineProperty(_locales, _types.LocaleCode.Italian, _italian.italian), _defineProperty(_locales, _types.LocaleCode.Indonesian, _indonesian.indonesian), _defineProperty(_locales, _types.LocaleCode.Malay, _malay.malay), _defineProperty(_locales, _types.LocaleCode.Portuguese, _portuguese.portuguese), _defineProperty(_locales, _types.LocaleCode.Russian, _russian.russian), _defineProperty(_locales, _types.LocaleCode.Tagalog, _tagalog.tagalog), _defineProperty(_locales, _types.LocaleCode.Thai, _thai.thai), _defineProperty(_locales, _types.LocaleCode.Lao, _lao.lao), _defineProperty(_locales, _types.LocaleCode.Vietnamese, _vietnamese.vietnamese), _defineProperty(_locales, _types.LocaleCode.Arabic, _arabic.arabic), _defineProperty(_locales, _types.LocaleCode.Turkish, _turkish.turkish), _locales);
/**
 * Function to check if a locale is CJK - Chinese/Japanese/Korean.
 * Often logic is set to be different in these three language types as they
 * use chinese characters or their derivatives
 * @param locale
 */

exports.locales = locales;

function isCJKLocale(locale) {
  return locale === _types.LocaleCode.Japanese || locale === _types.LocaleCode.Korean || locale === _types.LocaleCode.ChineseSimplified || locale === _types.LocaleCode.ChineseTraditional;
}
