var _locales;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { arabic } from './localeDefinitions/arabic.js';
import { chineseSimplified } from './localeDefinitions/chineseSimplified.js';
import { chineseTraditional } from './localeDefinitions/chineseTraditional.js';
import { english } from './localeDefinitions/english.js';
import { french } from './localeDefinitions/french.js';
import { german } from './localeDefinitions/german.js';
import { indonesian } from './localeDefinitions/indonesian.js';
import { italian } from './localeDefinitions/italian.js';
import { japanese } from './localeDefinitions/japanese.js';
import { korean } from './localeDefinitions/korean.js';
import { lao } from './localeDefinitions/lao.js';
import { malay } from './localeDefinitions/malay.js';
import { portuguese } from './localeDefinitions/portuguese.js';
import { russian } from './localeDefinitions/russian.js';
import { spanish } from './localeDefinitions/spanish.js';
import { tagalog } from './localeDefinitions/tagalog.js';
import { thai } from './localeDefinitions/thai.js';
import { turkish } from './localeDefinitions/turkish.js';
import { vietnamese } from './localeDefinitions/vietnamese.js';
import { LocaleCode } from './types.js';
export { LocaleCode } from './types.js';
/**
 * Priority ordered array of locales
 */

var ordered = [english, japanese, korean, chineseSimplified, chineseTraditional, german, spanish, french, italian, indonesian, malay, portuguese, russian, tagalog, thai, lao, vietnamese, arabic];
/**
 * Returns the correct default locale
 */

function getDefaultLocale(selectableLocales) {
  var locales = selectableLocales ? ordered.filter(function (item) {
    return selectableLocales.find(function (locale) {
      return locale === item.code;
    });
  }) : ordered;
  var englishLocale = locales.find(function (locale) {
    return locale.code === LocaleCode.English;
  });
  if (englishLocale) return englishLocale;
  var japaneseLocale = locales.find(function (locale) {
    return locale.code === LocaleCode.Japanese;
  });
  if (japaneseLocale) return japaneseLocale;
  return locales[0];
}
/**
 * Priority ordered array of LocaleCodes
 */


var orderedLocales = ordered.map(function (locale) {
  return locale.code;
});
/**
 * Re-order and filter a list of locales to match the default order
 * @param locales
 */

function orderLocales(locales) {
  return orderedLocales.filter(function (locale) {
    return locales.indexOf(locale) >= 0;
  });
}
/**
 * All locales
 * @type {Object} keys are locale codes, values are Locale objects
 */


var locales = (_locales = {}, _defineProperty(_locales, LocaleCode.English, english), _defineProperty(_locales, LocaleCode.Japanese, japanese), _defineProperty(_locales, LocaleCode.Korean, korean), _defineProperty(_locales, LocaleCode.ChineseSimplified, chineseSimplified), _defineProperty(_locales, LocaleCode.ChineseTraditional, chineseTraditional), _defineProperty(_locales, LocaleCode.German, german), _defineProperty(_locales, LocaleCode.Spanish, spanish), _defineProperty(_locales, LocaleCode.French, french), _defineProperty(_locales, LocaleCode.Italian, italian), _defineProperty(_locales, LocaleCode.Indonesian, indonesian), _defineProperty(_locales, LocaleCode.Malay, malay), _defineProperty(_locales, LocaleCode.Portuguese, portuguese), _defineProperty(_locales, LocaleCode.Russian, russian), _defineProperty(_locales, LocaleCode.Tagalog, tagalog), _defineProperty(_locales, LocaleCode.Thai, thai), _defineProperty(_locales, LocaleCode.Lao, lao), _defineProperty(_locales, LocaleCode.Vietnamese, vietnamese), _defineProperty(_locales, LocaleCode.Arabic, arabic), _defineProperty(_locales, LocaleCode.Turkish, turkish), _locales);
/**
 * Function to check if a locale is CJK - Chinese/Japanese/Korean.
 * Often logic is set to be different in these three language types as they
 * use chinese characters or their derivatives
 * @param locale
 */

function isCJKLocale(locale) {
  return locale === LocaleCode.Japanese || locale === LocaleCode.Korean || locale === LocaleCode.ChineseSimplified || locale === LocaleCode.ChineseTraditional;
}

export { getDefaultLocale, isCJKLocale, locales, orderLocales, ordered, orderedLocales };
