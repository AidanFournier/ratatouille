"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Textarea = void 0;

var _tablekitIcon = require("@tablecheck/tablekit-icon");

var _tablekitInput = require("@tablecheck/tablekit-input");

var _tablekitSpinner = require("@tablecheck/tablekit-spinner");

var _tablekitTheme = require("@tablecheck/tablekit-theme");

var _react = require("react");

var _styled = require("./styled.js");

var _jsxRuntime = require("@emotion/react/jsx-runtime");

var _excluded = ["className", "type", "shouldFitContainer", "id", "appearance", "isRequired", "label", "inputCss", "inputClassName", "message", "isMessageHidden", "isSpellCheckEnabled", "maxLength", "autoComplete", "name", "placeholder", "form", "onBlur", "onChange", "onFocus", "onKeyDown", "onKeyPress", "onKeyUp", "value", "size", "enableResize", "minimumRows", "shouldAutoExpand", "width"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function setRef(ref, element) {
  if (!element || !ref) return;
  if (typeof ref === 'function') ref(element);else ref.current = element;
}

var Textarea = /*#__PURE__*/(0, _react.forwardRef)(function (props, _ref) {
  var className = props.className,
      type = props.type,
      shouldFitContainer = props.shouldFitContainer,
      id = props.id,
      appearance = props.appearance,
      isRequired = props.isRequired,
      label = props.label,
      inputCss = props.inputCss,
      inputClassName = props.inputClassName,
      message = props.message,
      isMessageHidden = props.isMessageHidden,
      isSpellCheckEnabled = props.isSpellCheckEnabled,
      maxLength = props.maxLength,
      autoComplete = props.autoComplete,
      name = props.name,
      placeholder = props.placeholder,
      form = props.form,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onFocus = props.onFocus,
      onKeyDown = props.onKeyDown,
      onKeyPress = props.onKeyPress,
      onKeyUp = props.onKeyUp,
      value = props.value,
      _props$size = props.size,
      size = _props$size === void 0 ? _tablekitInput.InputSize.Regular : _props$size,
      shouldEnableResize = props.enableResize,
      minimumRows = props.minimumRows,
      shouldAutoExpand = props.shouldAutoExpand,
      _props$width = props.width,
      width = _props$width === void 0 ? _tablekitTheme.Size.Regular : _props$width,
      restProps = _objectWithoutProperties(props, _excluded);

  var iconBefore = props.iconBefore,
      iconAfter = props.iconAfter;
  var isDisabled = appearance === _tablekitInput.Appearance.Disabled;
  var innerRef = (0, _react.useRef)();

  var autoResize = function autoResize() {
    if (!innerRef.current) return;
    setTimeout(function () {
      if (!innerRef.current) return;
      innerRef.current.style.height = 'auto';
      innerRef.current.style.height = "".concat(innerRef.current.scrollHeight, "px");
    });
  };

  var keyDownHandler = shouldAutoExpand ? function (event) {
    if (onKeyDown) onKeyDown(event);
    autoResize();
  } : onKeyDown;

  if (type === 'search') {
    iconBefore = (0, _jsxRuntime.jsx)(_tablekitIcon.Icon, {
      icon: (0, _tablekitIcon.getIcon)('search')
    });
  }

  var labelElement = label !== undefined ? (0, _jsxRuntime.jsx)(_tablekitInput.Label, {
    htmlFor: id,
    isRequired: isRequired,
    label: label
  }) : null;

  if (appearance === _tablekitInput.Appearance.Loading) {
    iconAfter = (0, _jsxRuntime.jsx)(_tablekitSpinner.Spinner, {});
  } else if (appearance === _tablekitInput.Appearance.Invalid) {
    iconAfter = (0, _jsxRuntime.jsx)(_tablekitIcon.DangerIcon, {});
  } else if (appearance === _tablekitInput.Appearance.Warning) {
    iconAfter = (0, _jsxRuntime.jsx)(_tablekitIcon.WarningIcon, {});
  } else if (appearance === _tablekitInput.Appearance.Success) {
    iconAfter = (0, _jsxRuntime.jsx)(_tablekitIcon.SuccessIcon, {});
  } else if (iconAfter) {
    iconAfter = /*#__PURE__*/(0, _react.cloneElement)(iconAfter, {
      size: _tablekitTheme.Size.Regular
    });
  }

  return (0, _jsxRuntime.jsxs)(_tablekitInput.InputContainer, {
    className: className,
    shouldFitContainer: shouldFitContainer,
    width: width,
    children: [labelElement, (0, _jsxRuntime.jsxs)(_styled.TextareaInputWrapper, {
      children: [iconBefore && (0, _jsxRuntime.jsx)(_tablekitInput.InputPrependElement, {
        elementSize: size,
        isDisabled: isDisabled,
        children: /*#__PURE__*/(0, _react.cloneElement)(iconBefore, {
          size: _tablekitTheme.Size.Regular
        })
      }), (0, _jsxRuntime.jsx)(_styled.TextareaInput, _objectSpread(_objectSpread({}, restProps), {}, {
        autoComplete: autoComplete,
        className: inputClassName,
        css: inputCss,
        disabled: isDisabled,
        form: form,
        id: id,
        maxLength: maxLength,
        name: name,
        onBlur: onBlur,
        onChange: onChange,
        onFocus: onFocus,
        onKeyDown: keyDownHandler,
        onKeyPress: onKeyPress,
        onKeyUp: onKeyUp,
        placeholder: placeholder,
        readOnly: appearance === _tablekitInput.Appearance.ReadOnly,
        required: isRequired,
        spellCheck: isSpellCheckEnabled,
        size: size,
        type: type,
        value: value,
        minimumRows: minimumRows,
        enableResize: shouldEnableResize || isDisabled,
        ref: function ref(r) {
          setRef(_ref, r);
          setRef(innerRef, r);
          if (shouldAutoExpand) autoResize();
        }
      })), iconAfter && (0, _jsxRuntime.jsx)(_tablekitInput.InputAppendElement, {
        elementSize: size,
        isDisabled: isDisabled,
        children: /*#__PURE__*/(0, _react.cloneElement)(iconAfter, {
          size: _tablekitTheme.Size.Regular
        })
      })]
    }), !isMessageHidden && (0, _jsxRuntime.jsx)(_tablekitInput.InputMessage, {
      children: message
    })]
  });
});
exports.Textarea = Textarea;
