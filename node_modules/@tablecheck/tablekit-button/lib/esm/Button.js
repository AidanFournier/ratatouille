var _excluded = ["iconBefore", "iconAfter"],
    _excluded2 = ["component"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { useTheme } from '@emotion/react';
import { Size } from '@tablecheck/tablekit-theme';
import * as React from 'react';
import { ButtonContent } from './styled/ButtonContent.js';
import { ButtonWrapper } from './styled/ButtonWrapper.js';
import { CircleWrapper } from './styled/CircleWrapper.js';
import { LoadingSpinner } from './styled/LoadingSpinner.js';
import { IconWrapper, StyledLink, StyledButton } from './styled/getButtonStyles.js';
import { getButtonProps, isVerticalButton } from './utils/getButtonProps.js';
import { jsxs, jsx } from '@emotion/react/jsx-runtime';

function renderIcon(icon, props) {
  if (typeof icon === 'function') {
    return icon(props);
  }

  var size = props.size || Size.Regular;
  return /*#__PURE__*/React.cloneElement(icon, {
    size: size
  });
}

function InternalButton(props) {
  var children = props.children,
      isOnlyChild = props.isOnlyChild,
      _props$isLoading = props.isLoading,
      isLoading = _props$isLoading === void 0 ? false : _props$isLoading,
      shouldFitContainer = props.fit;
  var theme = useTheme();

  var _getButtonProps = getButtonProps(props, theme),
      iconBefore = _getButtonProps.iconBefore,
      iconAfter = _getButtonProps.iconAfter,
      buttonProps = _objectWithoutProperties(_getButtonProps, _excluded);

  if (isVerticalButton(props)) {
    return jsxs(ButtonWrapper, {
      fit: shouldFitContainer,
      isVertical: true,
      children: [isLoading ? jsx(LoadingSpinner, {
        size: buttonProps.size
      }) : null, iconBefore && (isOnlyChild ? jsx(IconWrapper, {
        isLoading: isLoading,
        children: renderIcon(iconBefore, props)
      }) : jsx(CircleWrapper, _objectSpread(_objectSpread({
        isLoading: isLoading
      }, buttonProps), {}, {
        children: renderIcon(iconBefore, props)
      }))), children ? jsx(ButtonContent, {
        hasIconBefore: !!iconBefore,
        isVertical: true,
        isLoading: !!isLoading,
        children: children
      }) : null]
    });
  }

  return jsxs(ButtonWrapper, {
    fit: shouldFitContainer,
    children: [isLoading ? jsx(LoadingSpinner, {
      size: buttonProps.size
    }) : null, iconBefore && jsx(IconWrapper, {
      isLoading: isLoading,
      children: renderIcon(iconBefore, props)
    }), children ? jsx(ButtonContent, {
      hasIconAfter: !!iconAfter,
      hasIconBefore: !!iconBefore,
      isLoading: !!isLoading,
      followsIcon: !!iconBefore,
      children: children
    }) : null, iconAfter && jsx(IconWrapper, {
      isLoading: isLoading,
      children: renderIcon(iconAfter, props)
    })]
  });
}
/** @component */


var AnchorButton = /*#__PURE__*/React.forwardRef(function (props, innerRef) {
  var theme = useTheme();
  var derivedProps = getButtonProps(props, theme);
  return jsx(StyledLink, _objectSpread(_objectSpread({
    ref: innerRef
  }, derivedProps), {}, {
    onClick: function onClick(e) {
      if (derivedProps.isDisabled || derivedProps.isLoading) {
        e.stopPropagation();
      }

      if (derivedProps.onClick) derivedProps.onClick(e);
    },
    children: jsx(InternalButton, _objectSpread({}, derivedProps))
  }));
});

AnchorButton.withProps = function withProps(staticProps) {
  // we have to disable typescript checking here or we risk JS Heap overflows on compliling
  // the function signature is correct so this should be fine as it's just a wrapper
  // eslint-disable-next-line @typescript-eslint/naming-convention
  var UntypedButton = AnchorButton;
  return /*#__PURE__*/React.forwardRef(function (props, ref) {
    return jsx(UntypedButton, _objectSpread(_objectSpread(_objectSpread({}, props), staticProps), {}, {
      ref: ref
    }));
  });
};
/** @component */


var Button = /*#__PURE__*/React.forwardRef(function (props, innerRef) {
  var theme = useTheme();
  var derivedProps = getButtonProps(props, theme);
  return jsx(StyledButton, _objectSpread(_objectSpread({
    ref: innerRef
  }, derivedProps), {}, {
    onClick: function onClick(e) {
      if (derivedProps.isDisabled || derivedProps.isLoading) {
        e.stopPropagation();
      }

      if (derivedProps.onClick) derivedProps.onClick(e);
    },
    children: jsx(InternalButton, _objectSpread({}, derivedProps))
  }));
});

Button.withProps = function withProps(staticProps) {
  // we have to disable typescript checking here or we risk JS Heap overflows on compliling
  // the function signature is correct so this should be fine as it's just a wrapper
  // eslint-disable-next-line @typescript-eslint/naming-convention
  var UntypedButton = Button;
  return /*#__PURE__*/React.forwardRef(function (props, ref) {
    return jsx(UntypedButton, _objectSpread(_objectSpread(_objectSpread({}, props), staticProps), {}, {
      ref: ref
    }));
  });
};

var ComponentButtonInner = function ComponentButtonInner(_ref, innerRef) {
  var component = _ref.component,
      props = _objectWithoutProperties(_ref, _excluded2);

  var theme = useTheme();
  var derivedProps = getButtonProps(props, theme);
  var ResolvedComponent = React.useMemo(function () {
    return component ? StyledButton.withComponent(component, process.env.NODE_ENV === "production" ? {
      target: "ex3kjbp0"
    } : {
      target: "ex3kjbp0",
      label: "ResolvedComponent"
    }) : StyledButton;
  }, [component]);
  return jsx(ResolvedComponent, _objectSpread(_objectSpread({
    ref: innerRef
  }, derivedProps), {}, {
    onClick: function onClick(e) {
      if (derivedProps.isDisabled || derivedProps.isLoading) {
        e.stopPropagation();
      }

      if (derivedProps.onClick) derivedProps.onClick(e);
    },
    children: jsx(InternalButton, _objectSpread({}, derivedProps))
  }));
};
/** @component */


var ComponentButton = /*#__PURE__*/React.forwardRef(ComponentButtonInner);

ComponentButton.withComponent = function withComponent( // eslint-disable-next-line @typescript-eslint/naming-convention
NewComponent) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$staticProps = options.staticProps,
      staticProps = _options$staticProps === void 0 ? {} : _options$staticProps,
      propFilter = options.propFilter;
  var filteredComponent = NewComponent;

  if (propFilter) {
    filteredComponent = function filteredComponent(unfilteredProps) {
      return jsx(NewComponent, _objectSpread({}, Object.keys(unfilteredProps).reduce(function (filteredProps, propKey) {
        if (propKey !== 'ref' && propKey !== 'component' && propFilter(propKey)) {
          return _objectSpread(_objectSpread({}, filteredProps), {}, _defineProperty({}, propKey, unfilteredProps[propKey]));
        }

        return filteredProps; // eslint-disable-next-line @typescript-eslint/no-explicit-any
      }, {})));
    };
  } // we have to disable typescript checking here or we risk JS Heap overflows on compliling
  // the function signature is correct so this should be fine as it's just a wrapper
  // eslint-disable-next-line @typescript-eslint/naming-convention


  var UntypedButton = ComponentButton;
  return /*#__PURE__*/React.forwardRef(function (props, ref) {
    return jsx(UntypedButton, _objectSpread(_objectSpread(_objectSpread({}, props), staticProps), {}, {
      ref: ref,
      component: filteredComponent
    }));
  });
};

export { AnchorButton, Button, ComponentButton, InternalButton };
