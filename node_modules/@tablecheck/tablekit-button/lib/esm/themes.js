var _buttonClassicTheme, _objectSpread2;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { PackageNamespace } from '@tablecheck/tablekit-package-namespace';
import { COLORS } from '@tablecheck/tablekit-theme';
import { hexToRgba } from '@tablecheck/tablekit-utils';
import { Color } from './types.js';
var buttonThemeNamespace = PackageNamespace.Button;
var buttonClassicTheme = (_buttonClassicTheme = {}, _defineProperty(_buttonClassicTheme, Color.Primary, {
  main: function main(_ref) {
    var theme = _ref.theme;
    return theme.colors.primary;
  },
  secondary: function secondary(_ref2) {
    var theme = _ref2.theme;
    return theme.colors.primary;
  },
  hover: function hover(_ref3) {
    var theme = _ref3.theme;
    return theme.colors.primaryHover;
  },
  text: function text(_ref4) {
    var theme = _ref4.theme;
    return theme.colors.invertedText;
  },
  active: function active(_ref5) {
    var theme = _ref5.theme;
    return theme.colors.primary;
  },
  hoverTransparent: function hoverTransparent(_ref6) {
    var theme = _ref6.theme;
    return theme.colors.hoverPrimaryBackground;
  },
  activeTransparent: function activeTransparent(_ref7) {
    var theme = _ref7.theme;
    return theme.colors.primarySelected;
  }
}), _defineProperty(_buttonClassicTheme, Color.Success, {
  main: function main(_ref8) {
    var theme = _ref8.theme;
    return theme.colors.success;
  },
  text: 'white',
  hover: COLORS.GREEN.L4,
  active: COLORS.GREEN.L6,
  hoverTransparent: hexToRgba(COLORS.GREEN.L4, 0.1),
  activeTransparent: hexToRgba(COLORS.GREEN.L4, 0.2)
}), _defineProperty(_buttonClassicTheme, Color.Warning, {
  main: function main(_ref9) {
    var theme = _ref9.theme;
    return theme.colors.warning;
  },
  text: 'white',
  hover: COLORS.YELLOW.L5,
  active: COLORS.YELLOW.L7,
  hoverTransparent: hexToRgba(COLORS.YELLOW.L5, 0.1),
  activeTransparent: hexToRgba(COLORS.YELLOW.L5, 0.2)
}), _defineProperty(_buttonClassicTheme, Color.Danger, {
  main: function main(_ref10) {
    var theme = _ref10.theme;
    return theme.colors.danger;
  },
  text: 'white',
  hover: COLORS.RED.L4,
  active: COLORS.RED.L6,
  hoverTransparent: hexToRgba(COLORS.RED.L4, 0.1),
  activeTransparent: hexToRgba(COLORS.RED.L4, 0.2)
}), _defineProperty(_buttonClassicTheme, Color.Ghost, {
  main: COLORS.GRAY.L7,
  text: 'black',
  hover: COLORS.GRAY.L5,
  active: COLORS.GRAY.L6,
  hoverTransparent: COLORS.GRAY_TRANSLUCENT.L3,
  activeTransparent: COLORS.GRAY_TRANSLUCENT.L4
}), _buttonClassicTheme);

var buttonDarkTheme = _objectSpread(_objectSpread({}, buttonClassicTheme), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, Color.Primary, _objectSpread(_objectSpread({}, buttonClassicTheme[Color.Primary]), {}, {
  secondary: function secondary(_ref11) {
    var theme = _ref11.theme;
    return theme.colors.primary2;
  },
  text: 'white'
})), _defineProperty(_objectSpread2, Color.Ghost, {
  main: COLORS.WHITE_TRANSLUCENT.L7,
  text: 'white',
  active: COLORS.WHITE_TRANSLUCENT.L4,
  hover: COLORS.WHITE_TRANSLUCENT.L4
}), _objectSpread2));

export { buttonClassicTheme, buttonDarkTheme, buttonThemeNamespace };
