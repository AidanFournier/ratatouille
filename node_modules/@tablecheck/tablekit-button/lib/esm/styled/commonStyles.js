import { css } from '@emotion/react';
import { BORDER_RADIUS, FieldHeight } from '@tablecheck/tablekit-theme';
import { ButtonShape, ButtonSize } from '../types.js';
import { isVerticalButton } from '../utils/getButtonProps.js';

function _EMOTION_STRINGIFIED_CSS_ERROR__() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}

var transition = process.env.NODE_ENV === "production" ? {
  name: "1gg7g1k",
  styles: "transition:all 120ms ease-in-out"
} : {
  name: "1v71p4e-transition",
  styles: "transition:all 120ms ease-in-out;label:transition;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
var styledComponentOptions = {
  shouldForwardProp: function shouldForwardProp(prop) {
    return ['fit', 'isOnlyChild', 'isInteractive', 'iconBefore', 'iconAfter', 'isLoading', 'isDisabled'].indexOf(prop) === -1;
  }
};

function getLoadingStyle(_ref) {
  var isLoading = _ref.isLoading;
  return /*#__PURE__*/css("transition:opacity 0.3s;", isLoading ? 'opacity: 0;' : undefined, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:getLoadingStyle;"));
}

var getBorderRadius = function getBorderRadius(fieldHeight) {
  var shape = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ButtonShape.Rounded;

  switch (shape) {
    case ButtonShape.Circular:
      return fieldHeight;

    case ButtonShape.Sharp:
      return 0;

    default:
      return "".concat(BORDER_RADIUS, "px");
  }
};

var getOutlineRadius = function getOutlineRadius(fieldHeight) {
  var shape = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ButtonShape.Rounded;

  switch (shape) {
    case ButtonShape.Circular:
      return fieldHeight;

    case ButtonShape.Sharp:
      return 0;

    default:
      return "".concat(BORDER_RADIUS + 2, "px");
  }
};

var getButtonHeight = function getButtonHeight(props) {
  var size = props.size,
      isOnlyChild = props.isOnlyChild;
  var isVertical = isVerticalButton(props);
  if (isVertical && !isOnlyChild) return 'auto';

  switch (size) {
    case ButtonSize.Small:
      return FieldHeight.Small;

    case ButtonSize.Regular2:
      return FieldHeight.Regular2;

    case ButtonSize.Large:
      return FieldHeight.Large;

    default:
      return FieldHeight.Regular;
  }
};

export { getBorderRadius, getButtonHeight, getLoadingStyle, getOutlineRadius, styledComponentOptions, transition };
