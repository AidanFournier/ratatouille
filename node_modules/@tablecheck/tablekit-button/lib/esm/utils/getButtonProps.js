var _excluded = ["children", "color", "size", "disabled", "shouldFitContainer", "type"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { Appearance, Color, ButtonSize, ButtonShape } from '../types.js';

var isVerticalButton = function isVerticalButton(_ref) {
  var appearance = _ref.appearance;
  return !!appearance && [Appearance.Vertical, Appearance.DisabledVertical].indexOf(appearance) !== -1;
};

var getButtonProps = function getButtonProps(props, theme) {
  var children = props.children,
      _props$color = props.color,
      color = _props$color === void 0 ? Color.Primary : _props$color,
      _props$size = props.size,
      size = _props$size === void 0 ? ButtonSize.Regular : _props$size,
      _props$disabled = props.disabled,
      isHtmlDisabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$shouldFitConta = props.shouldFitContainer,
      shouldFitContainer = _props$shouldFitConta === void 0 ? false : _props$shouldFitConta,
      _props$type = props.type,
      type = _props$type === void 0 ? 'button' : _props$type,
      passThroughProps = _objectWithoutProperties(props, _excluded);

  var _props$appearance = props.appearance,
      appearance = _props$appearance === void 0 ? Appearance.Solid : _props$appearance,
      _props$isDisabled = props.isDisabled,
      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
      shape = props.shape;

  if (appearance === Appearance.Disabled || appearance === Appearance.DisabledVertical || isDisabled || isHtmlDisabled) {
    isDisabled = true;
  }

  if (isDisabled) {
    if (isVerticalButton(props)) {
      appearance = Appearance.DisabledVertical;
    } else {
      appearance = Appearance.Disabled;
    }
  }

  var iconBefore = props.iconBefore,
      iconAfter = props.iconAfter;

  if (isVerticalButton(props)) {
    iconAfter = undefined;

    iconBefore = iconBefore || iconAfter || function () {
      return '?';
    };

    shape = ButtonShape.Sharp;
  } else if (theme && theme.isRtl) {
    var tempIcon = iconBefore;
    iconBefore = iconAfter;
    iconAfter = tempIcon;
  }

  var isOnlyChild = !!(iconBefore && !iconAfter && !children || iconAfter && !iconBefore && !children);
  return _objectSpread(_objectSpread({}, passThroughProps), {}, {
    appearance: appearance,
    disabled: isDisabled,
    size: size,
    isOnlyChild: isOnlyChild,
    fit: shouldFitContainer,
    children: children,
    iconBefore: iconBefore,
    iconAfter: iconAfter,
    shape: shape,
    type: type,
    color: color
  });
};

export { getButtonProps, isVerticalButton };
