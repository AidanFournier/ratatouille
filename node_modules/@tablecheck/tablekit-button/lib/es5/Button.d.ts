import * as React from 'react';
import { AnchorButtonProps, BaseButtonProps, ButtonProps, ComponentButtonProps, DerivedButtonProps } from './types';
export declare function InternalButton(props: DerivedButtonProps): JSX.Element;
/** @component */
export declare const AnchorButton: AnchorButtonType;
interface AnchorButtonType {
    (props: AnchorButtonProps & React.RefAttributes<HTMLAnchorElement>): React.ReactElement;
    withProps<StaticProps extends Partial<AnchorButtonProps>>(props: StaticProps): React.ComponentType<Omit<AnchorButtonProps, keyof StaticProps> & React.RefAttributes<HTMLAnchorElement>>;
}
/** @component */
export declare const Button: ButtonType;
interface ButtonType {
    (props: ButtonProps & React.RefAttributes<HTMLButtonElement>): React.ReactElement;
    withProps<StaticProps extends Partial<ButtonProps>>(props: StaticProps): React.ComponentType<Omit<ButtonProps, keyof StaticProps> & React.RefAttributes<HTMLButtonElement>>;
}
/** @component */
export declare const ComponentButton: ComponentButtonType;
interface WithComponentOptions {
    staticProps?: BaseButtonProps;
    propFilter?: (propName: string) => boolean;
}
interface StaticComponentButtonType<Component extends React.ElementType = React.ElementType<'button'>> {
    <RefElement = HTMLButtonElement>(props: BaseButtonProps & Omit<React.ComponentPropsWithoutRef<Component>, 'component'> & React.RefAttributes<RefElement>): React.ReactElement | null;
}
interface ComponentButtonType {
    <Component extends React.ElementType = React.ElementType<'button'>, RefElement = HTMLButtonElement>(props: ComponentButtonProps<Component> & React.RefAttributes<RefElement>): React.ReactElement | null;
    withComponent<NewComponent extends React.ElementType>(newComponent: NewComponent, options?: WithComponentOptions): StaticComponentButtonType<NewComponent>;
}
export {};
