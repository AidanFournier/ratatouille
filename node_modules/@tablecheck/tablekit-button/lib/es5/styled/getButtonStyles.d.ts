/// <reference types="react" />
import { SerializedStyles, Theme } from '@emotion/react';
import { DerivedButtonProps } from '../types';
export declare function getButtonStyles(props: DerivedButtonProps & {
    theme: Theme;
}): SerializedStyles;
export declare const StyledButton: import("@emotion/styled").StyledComponent<{
    theme?: Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & import("../types").BaseButtonProps & import("react").DOMAttributes<HTMLAnchorElement | HTMLButtonElement> & {
    disabled?: boolean | undefined;
    fit?: boolean | undefined;
    isOnlyChild?: boolean | undefined;
    color: import("../types").Color;
}, import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, {}>;
export declare const StyledLink: import("@emotion/styled").StyledComponent<{
    theme?: Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & import("../types").BaseButtonProps & import("react").DOMAttributes<HTMLAnchorElement | HTMLButtonElement> & {
    disabled?: boolean | undefined;
    fit?: boolean | undefined;
    isOnlyChild?: boolean | undefined;
    color: import("../types").Color;
}, import("react").DetailedHTMLProps<import("react").AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, {}>;
export declare const IconWrapper: import("@emotion/styled").StyledComponent<{
    theme?: Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & {
    isLoading: boolean;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {}>;
