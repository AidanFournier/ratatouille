"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getButtonHeight = exports.getBorderRadius = void 0;
exports.getLoadingStyle = getLoadingStyle;
exports.transition = exports.styledComponentOptions = exports.getOutlineRadius = void 0;

var _react = require("@emotion/react");

var _tablekitTheme = require("@tablecheck/tablekit-theme");

var _types = require("../types.js");

var _getButtonProps = require("../utils/getButtonProps.js");

function _EMOTION_STRINGIFIED_CSS_ERROR__() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}

var transition = process.env.NODE_ENV === "production" ? {
  name: "1gg7g1k",
  styles: "transition:all 120ms ease-in-out"
} : {
  name: "1v71p4e-transition",
  styles: "transition:all 120ms ease-in-out;label:transition;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
exports.transition = transition;
var styledComponentOptions = {
  shouldForwardProp: function shouldForwardProp(prop) {
    return ['fit', 'isOnlyChild', 'isInteractive', 'iconBefore', 'iconAfter', 'isLoading', 'isDisabled'].indexOf(prop) === -1;
  }
};
exports.styledComponentOptions = styledComponentOptions;

function getLoadingStyle(_ref) {
  var isLoading = _ref.isLoading;
  return /*#__PURE__*/(0, _react.css)("transition:opacity 0.3s;", isLoading ? 'opacity: 0;' : undefined, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:getLoadingStyle;"));
}

var getBorderRadius = function getBorderRadius(fieldHeight) {
  var shape = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _types.ButtonShape.Rounded;

  switch (shape) {
    case _types.ButtonShape.Circular:
      return fieldHeight;

    case _types.ButtonShape.Sharp:
      return 0;

    default:
      return "".concat(_tablekitTheme.BORDER_RADIUS, "px");
  }
};

exports.getBorderRadius = getBorderRadius;

var getOutlineRadius = function getOutlineRadius(fieldHeight) {
  var shape = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _types.ButtonShape.Rounded;

  switch (shape) {
    case _types.ButtonShape.Circular:
      return fieldHeight;

    case _types.ButtonShape.Sharp:
      return 0;

    default:
      return "".concat(_tablekitTheme.BORDER_RADIUS + 2, "px");
  }
};

exports.getOutlineRadius = getOutlineRadius;

var getButtonHeight = function getButtonHeight(props) {
  var size = props.size,
      isOnlyChild = props.isOnlyChild;
  var isVertical = (0, _getButtonProps.isVerticalButton)(props);
  if (isVertical && !isOnlyChild) return 'auto';

  switch (size) {
    case _types.ButtonSize.Small:
      return _tablekitTheme.FieldHeight.Small;

    case _types.ButtonSize.Regular2:
      return _tablekitTheme.FieldHeight.Regular2;

    case _types.ButtonSize.Large:
      return _tablekitTheme.FieldHeight.Large;

    default:
      return _tablekitTheme.FieldHeight.Regular;
  }
};

exports.getButtonHeight = getButtonHeight;
