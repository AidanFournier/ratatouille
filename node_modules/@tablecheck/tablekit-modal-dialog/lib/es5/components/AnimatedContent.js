"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnimatedContent = void 0;

var _tablekitTheme = require("@tablecheck/tablekit-theme");

var _reactSpring = require("react-spring");

var _styled = require("../styled.js");

var _jsxRuntime = require("@emotion/react/jsx-runtime");

var AnimatedContent = function AnimatedContent(props) {
  var children = props.children,
      className = props.className,
      height = props.height,
      width = props.width,
      maxHeight = props.maxHeight,
      maxWidth = props.maxWidth,
      isChromeless = props.isChromeless,
      isOpen = props.isOpen,
      onEscapeKeyDown = props.onEscapeKeyDown,
      onOpenAutoFocus = props.onOpenAutoFocus,
      onCloseAutoFocus = props.onCloseAutoFocus,
      shouldPreventCloseOutside = props.shouldPreventCloseOutside,
      _onPointerDownOutside = props.onPointerDownOutside,
      testId = props['data-testid'];
  var transition = (0, _reactSpring.useTransition)(isOpen, {
    from: {
      opacity: 0,
      top: _tablekitTheme.Spacing.L6
    },
    enter: {
      opacity: 1,
      top: "".concat(parseInt(_tablekitTheme.Spacing.L6, 10) / 2, "px")
    },
    leave: {
      opacity: 0,
      top: "".concat(parseInt(_tablekitTheme.Spacing.L6, 10) * 2, "px")
    }
  });
  return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: transition(function (styles, item) {
      if (!item) {
        return null;
      }

      return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
        children: [(0, _jsxRuntime.jsx)(_styled.ModalOverlay, {
          forceMount: true,
          style: {
            opacity: styles.opacity
          }
        }), (0, _jsxRuntime.jsx)(_styled.ModalContent, {
          className: className,
          forceMount: true,
          height: height,
          width: width,
          maxWidth: maxWidth,
          maxHeight: maxHeight,
          style: {
            opacity: styles.opacity,
            top: styles.top
          },
          isChromeless: isChromeless,
          onEscapeKeyDown: onEscapeKeyDown,
          onCloseAutoFocus: onCloseAutoFocus,
          onOpenAutoFocus: onOpenAutoFocus,
          onPointerDownOutside: function onPointerDownOutside(e) {
            if (_onPointerDownOutside) {
              _onPointerDownOutside(e);
            }

            if (shouldPreventCloseOutside) {
              e.preventDefault();
            }
          },
          "data-testid": testId,
          children: children
        })]
      });
    })
  });
};

exports.AnimatedContent = AnimatedContent;
