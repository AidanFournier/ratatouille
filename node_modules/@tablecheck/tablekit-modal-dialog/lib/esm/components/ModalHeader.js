var _variants;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import _styled from '@emotion/styled/base';
import { css } from '@emotion/react';
import { Icon, getIcon } from '@tablecheck/tablekit-icon';
import { Spacing, Size } from '@tablecheck/tablekit-theme';
import { variant } from '@tablecheck/tablekit-utils';
import { HeaderWrapper } from '../styled.js';
import { HeaderAppearance } from '../types.js';
import { ModalCloseButton } from './ModalCloseButton.js';
import { jsxs, jsx } from '@emotion/react/jsx-runtime';

function _EMOTION_STRINGIFIED_CSS_ERROR__() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}

var HeaderIconWrapper = _styled("span", process.env.NODE_ENV === "production" ? {
  target: "euu9wjt0"
} : {
  target: "euu9wjt0",
  label: "HeaderIconWrapper"
})(variant({
  prop: 'appearance',
  default: 'default',
  variants: (_variants = {
    default: process.env.NODE_ENV === "production" ? {
      name: "19y1cr8",
      styles: "color:currentColor"
    } : {
      name: "kiw0cb-default",
      styles: "color:currentColor;label:default;",
      toString: _EMOTION_STRINGIFIED_CSS_ERROR__
    }
  }, _defineProperty(_variants, HeaderAppearance.Danger, function (_ref) {
    var theme = _ref.theme;
    return /*#__PURE__*/css("color:", theme.colors.danger, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:HeaderIconWrapper;"));
  }), _defineProperty(_variants, HeaderAppearance.Warning, function (_ref2) {
    var theme = _ref2.theme;
    return /*#__PURE__*/css("color:", theme.colors.warning, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:HeaderIconWrapper;"));
  }), _variants)
}), ";margin-right:", Spacing.L2, ";flex:0 0 auto;padding:calc(", Spacing.L3, " / 2) 0;");

var ModalHeader = function ModalHeader(_ref3) {
  var appearance = _ref3.appearance,
      hasCloseIcon = _ref3.hasCloseIcon,
      children = _ref3.children,
      hasKeyline = _ref3.hasKeyline;
  return jsxs(HeaderWrapper, {
    hasKeyline: hasKeyline,
    hasCloseIcon: hasCloseIcon,
    children: [appearance ? jsx(HeaderIconWrapper, {
      appearance: appearance,
      children: jsx(Icon, {
        icon: getIcon(appearance),
        size: Size.Regular2
      })
    }) : null, children, hasCloseIcon ? jsx(ModalCloseButton, {
      iconBefore: function iconBefore() {
        return jsx(Icon, {
          icon: getIcon('close')
        });
      },
      tabIndex: -1
    }) : null]
  });
};

export { HeaderIconWrapper, ModalHeader };
