function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { Trigger } from '@radix-ui/react-dialog';
import { useState, useCallback } from 'react';
import { AnimatedContent } from './components/AnimatedContent.js';
import { ModalHeader } from './components/ModalHeader.js';
import { ModalRoot, ModalTitle, ModalBody, FooterWrapper } from './styled.js';
import { jsxs, jsx } from '@emotion/react/jsx-runtime';

var ModalDialog = function ModalDialog(props) {
  var children = props.children,
      className = props.className,
      headerContent = props.headerContent,
      height = props.height,
      width = props.width,
      maxWidth = props.maxWidth,
      maxHeight = props.maxHeight,
      footerContent = props.footerContent,
      headerAppearance = props.headerAppearance,
      hasCloseIcon = props.hasCloseIcon,
      hasKeylines = props.hasKeylines,
      isChromeless = props.isChromeless,
      shouldHideGutters = props.shouldHideGutters,
      onOpenChange = props.onOpenChange,
      isOpen = props.isOpen,
      shouldPreventCloseOutside = props.shouldPreventCloseOutside,
      onPointerDownOutside = props.onPointerDownOutside,
      onOpenAutoFocus = props.onOpenAutoFocus,
      onEscapeKeyDown = props.onEscapeKeyDown,
      onCloseAutoFocus = props.onCloseAutoFocus,
      testId = props['data-testid']; // internal state of uncontrolled modal, needed for animation

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isOpenInternal = _useState2[0],
      setIsOpenInternal = _useState2[1]; // eslint-disable-next-line react/destructuring-assignment


  var trigger = !props.onOpenChange ? props.trigger : null;
  var isModalOpen = typeof isOpen === 'undefined' ? isOpenInternal : isOpen;
  var onOpenChangeHandler = useCallback(function (state) {
    if (onOpenChange) {
      onOpenChange(state);
    } else {
      setIsOpenInternal(state);
    }
  }, [onOpenChange]);
  return jsxs(ModalRoot, {
    onOpenChange: onOpenChangeHandler,
    open: isModalOpen,
    children: [trigger ? jsx(Trigger, {
      asChild: true,
      children: trigger
    }) : null, jsxs(AnimatedContent, {
      className: className,
      isOpen: isModalOpen,
      height: height,
      width: width,
      maxWidth: maxWidth,
      maxHeight: maxHeight,
      onOpenAutoFocus: onOpenAutoFocus,
      onEscapeKeyDown: onEscapeKeyDown,
      onCloseAutoFocus: onCloseAutoFocus,
      onPointerDownOutside: onPointerDownOutside,
      isChromeless: isChromeless,
      shouldPreventCloseOutside: shouldPreventCloseOutside,
      "data-testid": testId,
      children: [typeof headerContent !== 'undefined' ? jsx(ModalHeader, {
        hasKeyline: hasKeylines,
        hasCloseIcon: hasCloseIcon,
        appearance: headerAppearance,
        children: typeof headerContent === 'string' ? jsx(ModalTitle, {
          children: headerContent
        }) : headerContent
      }) : null, jsx(ModalBody, {
        hasGutters: !shouldHideGutters,
        isScrollable: true,
        children: children
      }), footerContent ? jsx(FooterWrapper, {
        hasKeyline: hasKeylines,
        children: footerContent
      }) : null]
    })]
  });
};

export { ModalDialog };
