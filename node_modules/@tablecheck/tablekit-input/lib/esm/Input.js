var _excluded = ["id", "appearance", "className", "type", "shouldFitContainer", "isRequired", "label", "inputCss", "inputClassName", "message", "isMessageHidden", "isSpellCheckEnabled", "name", "placeholder", "onChange", "value", "size", "shape", "width", "alt"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { Icon, getIcon, SuccessIcon, WarningIcon, DangerIcon } from '@tablecheck/tablekit-icon';
import { Spinner } from '@tablecheck/tablekit-spinner';
import { Size } from '@tablecheck/tablekit-theme';
import { forwardRef, cloneElement } from 'react';
import { Label } from './Label.js';
import { InputContainer, InputWrapper, InputPrependElement, InputField, InputAppendElement, InputMessage } from './styled/index.js';
import { InputSize, InputShape, Appearance } from './types.js';
import { jsx, jsxs } from '@emotion/react/jsx-runtime';
var Input = /*#__PURE__*/forwardRef(function (props, ref) {
  var iconBefore = props.iconBefore,
      iconAfter = props.iconAfter;

  var id = props.id,
      appearance = props.appearance,
      className = props.className,
      type = props.type,
      shouldFitContainer = props.shouldFitContainer,
      isRequired = props.isRequired,
      label = props.label,
      inputCss = props.inputCss,
      inputClassName = props.inputClassName,
      message = props.message,
      isMessageHidden = props.isMessageHidden,
      isSpellCheckEnabled = props.isSpellCheckEnabled,
      name = props.name,
      placeholder = props.placeholder,
      onChange = props.onChange,
      value = props.value,
      _props$size = props.size,
      size = _props$size === void 0 ? InputSize.Regular : _props$size,
      _props$shape = props.shape,
      shape = _props$shape === void 0 ? InputShape.Rounded : _props$shape,
      _props$width = props.width,
      width = _props$width === void 0 ? Size.Regular : _props$width,
      alt = props.alt,
      restProps = _objectWithoutProperties(props, _excluded);

  var isDisabled = appearance === Appearance.Disabled;

  if (type === 'search') {
    iconBefore = jsx(Icon, {
      icon: getIcon('search')
    });
  }

  var labelElement = label !== undefined ? jsx(Label, {
    htmlFor: id,
    isRequired: isRequired,
    label: label
  }) : null;

  switch (appearance) {
    case Appearance.Loading:
      iconAfter = jsx(Spinner, {});
      break;

    case Appearance.Invalid:
      iconAfter = jsx(DangerIcon, {});
      break;

    case Appearance.Warning:
      iconAfter = jsx(WarningIcon, {});
      break;

    case Appearance.Success:
      iconAfter = jsx(SuccessIcon, {});
      break;

    default:
  }

  return jsxs(InputContainer, {
    className: className,
    shouldFitContainer: shouldFitContainer,
    width: width,
    children: [labelElement, jsxs(InputWrapper, {
      fieldSize: size,
      children: [iconBefore && jsx(InputPrependElement, {
        isDisabled: isDisabled,
        elementSize: size,
        children: /*#__PURE__*/cloneElement(iconBefore, {
          size: size
        })
      }), jsx(InputField, _objectSpread(_objectSpread({}, restProps), {}, {
        appearance: appearance,
        shape: shape,
        className: inputClassName,
        css: inputCss,
        disabled: isDisabled,
        hasIconAfter: !!iconAfter,
        hasIconBefore: !!iconBefore,
        id: id,
        ref: ref,
        name: name,
        onChange: onChange,
        placeholder: placeholder,
        alt: alt,
        readOnly: appearance === Appearance.ReadOnly,
        required: isRequired,
        spellCheck: isSpellCheckEnabled,
        fieldSize: size,
        type: type,
        value: value
      })), iconAfter && jsx(InputAppendElement, {
        isDisabled: isDisabled,
        elementSize: size,
        children: /*#__PURE__*/cloneElement(iconAfter, {
          size: size
        })
      })]
    }), !isMessageHidden && jsx(InputMessage, {
      children: message
    })]
  });
});
export { Input };
