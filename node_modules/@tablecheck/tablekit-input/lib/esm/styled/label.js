var _inputClassicTheme$la;

import _styled from '@emotion/styled/base';
import { Spacing } from '@tablecheck/tablekit-theme';
import { Typography } from '@tablecheck/tablekit-typography';
import { ifRtl, getThemeValue, padding } from '@tablecheck/tablekit-utils';
import { inputThemeNamespace, inputClassicTheme } from '../themes.js';

function _EMOTION_STRINGIFIED_CSS_ERROR__() {
  return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
}

var InputLabelWrapper = _styled("label", process.env.NODE_ENV === "production" ? {
  target: "ehdunnl2"
} : {
  target: "ehdunnl2",
  label: "InputLabelWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "1082qq3",
  styles: "display:block;width:100%"
} : {
  name: "1082qq3",
  styles: "display:block;width:100%",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var InputLabelInner = _styled("div", process.env.NODE_ENV === "production" ? {
  target: "ehdunnl1"
} : {
  target: "ehdunnl1",
  label: "InputLabelInner"
})(Typography.Label2, ";font-style:normal;letter-spacing:0em;text-align:", ifRtl('right', 'left'), ";color:", getThemeValue("".concat(inputThemeNamespace, ".label.textColor"), inputClassicTheme === null || inputClassicTheme === void 0 ? void 0 : (_inputClassicTheme$la = inputClassicTheme.label) === null || _inputClassicTheme$la === void 0 ? void 0 : _inputClassicTheme$la.textColor), ";margin-bottom:", Spacing.L2, ";position:relative;");

var RequiredIndicator = _styled("span", process.env.NODE_ENV === "production" ? {
  target: "ehdunnl0"
} : {
  target: "ehdunnl0",
  label: "RequiredIndicator"
})("color:", function (_ref) {
  var theme = _ref.theme;
  return theme.colors.danger;
}, ";", padding({
  left: '2px'
}), ";");

export { InputLabelInner, InputLabelWrapper, RequiredIndicator };
