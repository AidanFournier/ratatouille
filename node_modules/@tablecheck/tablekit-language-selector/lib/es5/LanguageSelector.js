"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LanguageSelector = void 0;

var _tablekitButton = require("@tablecheck/tablekit-button");

var _tablekitIcon = require("@tablecheck/tablekit-icon");

var _tablekitPanel = require("@tablecheck/tablekit-panel");

var _tablekitTheme = require("@tablecheck/tablekit-theme");

var _react = require("react");

var _styled = require("./styled.js");

var _types = require("./types.js");

var _jsxRuntime = require("@emotion/react/jsx-runtime");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var LanguageSelector = function LanguageSelector(_ref) {
  var className = _ref.className,
      containerCss = _ref.containerCss,
      _ref$currentLanguage = _ref.currentLanguage,
      currentLanguage = _ref$currentLanguage === void 0 ? 'en' : _ref$currentLanguage,
      onChangeLanguage = _ref.onChangeLanguage,
      locales = _ref.locales,
      _ref$view = _ref.view,
      view = _ref$view === void 0 ? _types.View.Desktop : _ref$view,
      _ref$itemWidth = _ref.itemWidth,
      itemWidth = _ref$itemWidth === void 0 ? '33.33%' : _ref$itemWidth,
      _ref$itemHeight = _ref.itemHeight,
      itemHeight = _ref$itemHeight === void 0 ? 'initial' : _ref$itemHeight,
      inlineDialogContainerCss = _ref.inlineDialogContainerCss,
      renderTrigger = _ref.renderTrigger,
      _ref$shouldShowCloseI = _ref.shouldShowCloseIcon,
      shouldShowCloseIcon = _ref$shouldShowCloseI === void 0 ? false : _ref$shouldShowCloseI;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      isPanelOpen = _useState2[0],
      setPanelOpen = _useState2[1];

  if (view === _types.View.Mobile) {
    return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
      children: [renderTrigger({
        onClick: function onClick() {
          setPanelOpen(true);
        },
        isOpen: isPanelOpen,
        ref: null
      }), (0, _jsxRuntime.jsxs)(_tablekitPanel.Panel, {
        isOpen: isPanelOpen,
        position: _tablekitPanel.PanelPosition.Bottom,
        togglePanel: function togglePanel() {},
        children: [shouldShowCloseIcon && (0, _jsxRuntime.jsx)(_styled.ButtonWrapper, {
          children: (0, _jsxRuntime.jsx)(_tablekitButton.Button, {
            size: _tablekitButton.ButtonSize.Small,
            appearance: _tablekitButton.ButtonAppearance.Subtle,
            shape: _tablekitButton.ButtonShape.Circular,
            color: _tablekitButton.ButtonColor.Ghost,
            onClick: function onClick() {
              return setPanelOpen(false);
            },
            iconBefore: function iconBefore() {
              return (0, _jsxRuntime.jsx)(_tablekitIcon.Icon, {
                icon: (0, _tablekitIcon.getIcon)('close')
              });
            },
            tabIndex: -1
          })
        }), (0, _jsxRuntime.jsx)(_styled.ScrollWrapper, {
          children: (0, _jsxRuntime.jsx)(_styled.Container, {
            css: containerCss,
            children: locales.map(function (item) {
              var _locales$find;

              var isSelected = item.code === currentLanguage;
              return (0, _jsxRuntime.jsxs)(_styled.LangItem, {
                itemWidth: itemWidth,
                itemHeight: itemHeight,
                isSelected: isSelected,
                "aria-selected": isSelected,
                "data-value": item.code,
                size: _tablekitTheme.Size.Large,
                onClick: function onClick() {
                  onChangeLanguage(item.code);
                  setPanelOpen(false);
                },
                children: [item.label, item.code !== currentLanguage && (0, _jsxRuntime.jsx)(_styled.ItemSubtitle, {
                  children: (_locales$find = locales.find(function (opt) {
                    return opt.code === currentLanguage;
                  })) === null || _locales$find === void 0 ? void 0 : _locales$find.translations[item.code]
                })]
              }, item.code);
            })
          })
        })]
      })]
    });
  }

  return (0, _jsxRuntime.jsx)(_styled.InlineDialogWrapper, {
    className: className,
    containerCss: inlineDialogContainerCss,
    renderTrigger: renderTrigger,
    children: function children(_ref2) {
      var onClose = _ref2.onClose;
      return (0, _jsxRuntime.jsx)(_styled.Container, {
        css: containerCss,
        children: locales.map(function (item) {
          var _locales$find2;

          var isSelected = item.code === currentLanguage;
          return (0, _jsxRuntime.jsxs)(_styled.LangItem, {
            itemWidth: itemWidth,
            itemHeight: itemHeight,
            isSelected: isSelected,
            "aria-selected": isSelected,
            "data-value": item.code,
            size: _tablekitTheme.Size.Large,
            onClick: function onClick() {
              onChangeLanguage(item.code);
              onClose();
            },
            children: [item.label, item.code !== currentLanguage && (0, _jsxRuntime.jsx)(_styled.ItemSubtitle, {
              children: (_locales$find2 = locales.find(function (opt) {
                return opt.code === currentLanguage;
              })) === null || _locales$find2 === void 0 ? void 0 : _locales$find2.translations[item.code]
            })]
          }, item.code);
        })
      });
    }
  });
};

exports.LanguageSelector = LanguageSelector;
