"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plexSansArabicFont = plexSansArabicFont;

var _react = require("@emotion/react");

var _buildFontFace = require("./buildFontFace.js");

var _weights = require("./weights.js");

var name = 'IBM Plex Sans Arabic';
var folder = 'IBMPlex-Sans-Arabic';

function plexSansArabicFont(fontWeights) {
  var sourceSansArabicExtraLightWoff = (0, _buildFontFace.getCdnPath)(folder, 'IBMPlexSansArabic-ExtraLight.woff');
  var sourceSansArabicExtraLightWoff2 = (0, _buildFontFace.getCdnPath)(folder, 'IBMPlexSansArabic-ExtraLight.woff2');
  var sourceSansArabicLightWoff = (0, _buildFontFace.getCdnPath)(folder, 'IBMPlexSansArabic-Light.woff');
  var sourceSansArabicLightWoff2 = (0, _buildFontFace.getCdnPath)(folder, 'IBMPlexSansArabic-Light.woff2');
  var sourceSansArabicRegularWoff = (0, _buildFontFace.getCdnPath)(folder, 'IBMPlexSansArabic-Regular.woff');
  var sourceSansArabicRegularWoff2 = (0, _buildFontFace.getCdnPath)(folder, 'IBMPlexSansArabic-Regular.woff2');
  var sourceSansArabicMediumWoff = (0, _buildFontFace.getCdnPath)(folder, 'IBMPlexSansArabic-Medium.woff');
  var sourceSansArabicMediumWoff2 = (0, _buildFontFace.getCdnPath)(folder, 'IBMPlexSansArabic-Medium.woff2');
  var sourceSansArabicSemiBoldWoff = (0, _buildFontFace.getCdnPath)(folder, 'IBMPlexSansArabic-SemiBold.woff');
  var sourceSansArabicSemiBoldWoff2 = (0, _buildFontFace.getCdnPath)(folder, 'IBMPlexSansArabic-SemiBold.woff2');
  var sourceSansArabicBoldWoff = (0, _buildFontFace.getCdnPath)(folder, 'IBMPlexSansArabic-Bold.woff');
  var sourceSansArabicBoldWoff2 = (0, _buildFontFace.getCdnPath)(folder, 'IBMPlexSansArabic-Bold.woff2');
  var preloadLinks = fontWeights.reduce(function (result, fontWeight) {
    if (fontWeight === _weights.FontWeight.ExtraLight) {
      return result.concat([(0, _buildFontFace.buildPreloadLink)(sourceSansArabicExtraLightWoff2)]);
    }

    if (fontWeight === _weights.FontWeight.Light) {
      return result.concat([(0, _buildFontFace.buildPreloadLink)(sourceSansArabicLightWoff2)]);
    }

    if (fontWeight === _weights.FontWeight.Regular) {
      return result.concat([(0, _buildFontFace.buildPreloadLink)(sourceSansArabicRegularWoff2)]);
    }

    if (fontWeight === _weights.FontWeight.Medium) {
      return result.concat([(0, _buildFontFace.buildPreloadLink)(sourceSansArabicMediumWoff2)]);
    }

    if (fontWeight === _weights.FontWeight.SemiBold) {
      return result.concat([(0, _buildFontFace.buildPreloadLink)(sourceSansArabicSemiBoldWoff2)]);
    }

    if (fontWeight === _weights.FontWeight.Bold) {
      return result.concat([(0, _buildFontFace.buildPreloadLink)(sourceSansArabicBoldWoff2)]);
    }

    return result;
  }, []);
  return [preloadLinks, /*#__PURE__*/(0, _react.css)((0, _buildFontFace.buildFontFace)({
    name: name,
    weight: _weights.FontWeight.ExtraLight,
    woff: sourceSansArabicExtraLightWoff,
    woff2: sourceSansArabicExtraLightWoff2
  }), " ", (0, _buildFontFace.buildFontFace)({
    name: name,
    weight: _weights.FontWeight.Light,
    woff: sourceSansArabicLightWoff,
    woff2: sourceSansArabicLightWoff2
  }), " ", (0, _buildFontFace.buildFontFace)({
    name: name,
    weight: _weights.FontWeight.Regular,
    woff: sourceSansArabicRegularWoff,
    woff2: sourceSansArabicRegularWoff2
  }), " ", (0, _buildFontFace.buildFontFace)({
    name: name,
    weight: _weights.FontWeight.Medium,
    woff: sourceSansArabicMediumWoff,
    woff2: sourceSansArabicMediumWoff2
  }), " ", (0, _buildFontFace.buildFontFace)({
    name: name,
    weight: _weights.FontWeight.SemiBold,
    woff: sourceSansArabicSemiBoldWoff,
    woff2: sourceSansArabicSemiBoldWoff2
  }), " ", (0, _buildFontFace.buildFontFace)({
    name: name,
    weight: _weights.FontWeight.Bold,
    woff: sourceSansArabicBoldWoff,
    woff2: sourceSansArabicBoldWoff2
  }), ";" + (process.env.NODE_ENV === "production" ? "" : ";label:plexSansArabicFont;"))];
}
