import { css } from '@emotion/react';
import { getCdnPath, buildPreloadLink, buildFontFace } from './buildFontFace.js';
import { FontWeight } from './weights.js';
var name = 'IBM Plex Sans Thai Looped';
var folder = 'IBMPlex-Sans-Thai-Looped';

function plexSansThaiLoopedFont(fontWeights) {
  var sourceSansThaiLoopedExtraLightWoff = getCdnPath(folder, 'IBMPlexSansThaiLooped-ExtraLight.woff');
  var sourceSansThaiLoopedExtraLightWoff2 = getCdnPath(folder, 'IBMPlexSansThaiLooped-ExtraLight.woff2');
  var sourceSansThaiLoopedLightWoff = getCdnPath(folder, 'IBMPlexSansThaiLooped-Light.woff');
  var sourceSansThaiLoopedLightWoff2 = getCdnPath(folder, 'IBMPlexSansThaiLooped-Light.woff2');
  var sourceSansThaiLoopedRegularWoff = getCdnPath(folder, 'IBMPlexSansThaiLooped-Regular.woff');
  var sourceSansThaiLoopedRegularWoff2 = getCdnPath(folder, 'IBMPlexSansThaiLooped-Regular.woff2');
  var sourceSansThaiLoopedMediumWoff = getCdnPath(folder, 'IBMPlexSansThaiLooped-Medium.woff');
  var sourceSansThaiLoopedMediumWoff2 = getCdnPath(folder, 'IBMPlexSansThaiLooped-Medium.woff2');
  var sourceSansThaiLoopedSemiBoldWoff = getCdnPath(folder, 'IBMPlexSansThaiLooped-SemiBold.woff');
  var sourceSansThaiLoopedSemiBoldWoff2 = getCdnPath(folder, 'IBMPlexSansThaiLooped-SemiBold.woff2');
  var sourceSansThaiLoopedBoldWoff = getCdnPath(folder, 'IBMPlexSansThaiLooped-Bold.woff');
  var sourceSansThaiLoopedBoldWoff2 = getCdnPath(folder, 'IBMPlexSansThaiLooped-Bold.woff2');
  var preloadLinks = fontWeights.reduce(function (result, fontWeight) {
    if (fontWeight === FontWeight.ExtraLight) {
      return result.concat([buildPreloadLink(sourceSansThaiLoopedExtraLightWoff2)]);
    }

    if (fontWeight === FontWeight.Light) {
      return result.concat([buildPreloadLink(sourceSansThaiLoopedLightWoff2)]);
    }

    if (fontWeight === FontWeight.Regular) {
      return result.concat([buildPreloadLink(sourceSansThaiLoopedRegularWoff2)]);
    }

    if (fontWeight === FontWeight.Medium) {
      return result.concat([buildPreloadLink(sourceSansThaiLoopedMediumWoff2)]);
    }

    if (fontWeight === FontWeight.SemiBold) {
      return result.concat([buildPreloadLink(sourceSansThaiLoopedSemiBoldWoff2)]);
    }

    if (fontWeight === FontWeight.Bold) {
      return result.concat([buildPreloadLink(sourceSansThaiLoopedBoldWoff2)]);
    }

    return result;
  }, []);
  return [preloadLinks, /*#__PURE__*/css(buildFontFace({
    name: name,
    weight: FontWeight.ExtraLight,
    woff: sourceSansThaiLoopedExtraLightWoff,
    woff2: sourceSansThaiLoopedExtraLightWoff2
  }), " ", buildFontFace({
    name: name,
    weight: FontWeight.Light,
    woff: sourceSansThaiLoopedLightWoff,
    woff2: sourceSansThaiLoopedLightWoff2
  }), " ", buildFontFace({
    name: name,
    weight: FontWeight.Regular,
    woff: sourceSansThaiLoopedRegularWoff,
    woff2: sourceSansThaiLoopedRegularWoff2
  }), " ", buildFontFace({
    name: name,
    weight: FontWeight.Medium,
    woff: sourceSansThaiLoopedMediumWoff,
    woff2: sourceSansThaiLoopedMediumWoff2
  }), " ", buildFontFace({
    name: name,
    weight: FontWeight.SemiBold,
    woff: sourceSansThaiLoopedSemiBoldWoff,
    woff2: sourceSansThaiLoopedSemiBoldWoff2
  }), " ", buildFontFace({
    name: name,
    weight: FontWeight.Bold,
    woff: sourceSansThaiLoopedBoldWoff,
    woff2: sourceSansThaiLoopedBoldWoff2
  }), ";" + (process.env.NODE_ENV === "production" ? "" : ";label:plexSansThaiLoopedFont;"))];
}

export { plexSansThaiLoopedFont };
