var _tagClassicTheme, _tagDarkTheme;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { PackageNamespace } from '@tablecheck/tablekit-package-namespace';
import { COLORS } from '@tablecheck/tablekit-theme';
import { TagAppearance } from './types.js';
var tagThemeNamespace = PackageNamespace.Tag;
var tagClassicTheme = (_tagClassicTheme = {
  common: {
    borderColor: function borderColor(_ref) {
      var theme = _ref.theme;
      return theme.colors.border;
    }
  }
}, _defineProperty(_tagClassicTheme, TagAppearance.Outline, {
  textColor: function textColor(_ref2) {
    var theme = _ref2.theme;
    return theme.colors.text;
  },
  backgroundColor: 'transparent',
  hoverBackgroundColor: function hoverBackgroundColor(_ref3) {
    var theme = _ref3.theme;
    return theme.colors.hoverNeutralBackground;
  },
  selectedBackgroundColor: function selectedBackgroundColor(_ref4) {
    var theme = _ref4.theme;
    return theme.colors.primary;
  },
  selectedTextColor: 'white',
  hoverSelectedBackgroundColor: function hoverSelectedBackgroundColor(_ref5) {
    var theme = _ref5.theme;
    return theme.colors.primary2;
  }
}), _defineProperty(_tagClassicTheme, TagAppearance.Solid, {
  textColor: function textColor(_ref6) {
    var theme = _ref6.theme;
    return theme.colors.text;
  },
  backgroundColor: COLORS.GRAY.L3,
  hoverBackgroundColor: function hoverBackgroundColor(_ref7) {
    var theme = _ref7.theme;
    return theme.colors.hoverNeutralBackground;
  },
  selectedBackgroundColor: function selectedBackgroundColor(_ref8) {
    var theme = _ref8.theme;
    return theme.colors.primary;
  },
  selectedTextColor: 'white',
  hoverSelectedBackgroundColor: function hoverSelectedBackgroundColor(_ref9) {
    var theme = _ref9.theme;
    return theme.colors.primary2;
  }
}), _tagClassicTheme);
var tagDarkTheme = (_tagDarkTheme = {
  common: {
    borderColor: function borderColor(_ref10) {
      var theme = _ref10.theme;
      return theme.colors.border;
    }
  }
}, _defineProperty(_tagDarkTheme, TagAppearance.Outline, {
  textColor: function textColor(_ref11) {
    var theme = _ref11.theme;
    return theme.colors.text;
  },
  backgroundColor: 'transparent',
  hoverBackgroundColor: function hoverBackgroundColor(_ref12) {
    var theme = _ref12.theme;
    return theme.colors.hoverNeutralBackground;
  },
  selectedBackgroundColor: function selectedBackgroundColor(_ref13) {
    var theme = _ref13.theme;
    return theme.colors.primary;
  },
  selectedTextColor: 'white',
  hoverSelectedBackgroundColor: function hoverSelectedBackgroundColor(_ref14) {
    var theme = _ref14.theme;
    return theme.colors.primary2;
  }
}), _defineProperty(_tagDarkTheme, TagAppearance.Solid, {
  textColor: function textColor(_ref15) {
    var theme = _ref15.theme;
    return theme.colors.text;
  },
  backgroundColor: COLORS.WHITE_TRANSLUCENT.L4,
  hoverBackgroundColor: function hoverBackgroundColor(_ref16) {
    var theme = _ref16.theme;
    return theme.colors.hoverNeutralBackground;
  },
  selectedBackgroundColor: function selectedBackgroundColor(_ref17) {
    var theme = _ref17.theme;
    return theme.colors.primary;
  },
  selectedTextColor: 'white',
  hoverSelectedBackgroundColor: function hoverSelectedBackgroundColor(_ref18) {
    var theme = _ref18.theme;
    return theme.colors.primary2;
  }
}), _tagDarkTheme);
export { tagClassicTheme, tagDarkTheme, tagThemeNamespace };
