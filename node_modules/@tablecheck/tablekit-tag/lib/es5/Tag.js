"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tag = void 0;

var _react = require("@emotion/react");

var _tablekitIcon = require("@tablecheck/tablekit-icon");

var _tablekitTheme = require("@tablecheck/tablekit-theme");

var _chromaTablekit = _interopRequireDefault(require("chroma-js/chroma-tablekit"));

var _styled = require("./styled.js");

var _themes = require("./themes.js");

var _types = require("./types.js");

var _utils = require("./utils.js");

var _jsxRuntime = require("@emotion/react/jsx-runtime");

var _excluded = ["color", "children", "isSelected", "className", "appearance", "size"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Tag = function Tag(_ref) {
  var tagColor = _ref.color,
      children = _ref.children,
      _ref$isSelected = _ref.isSelected,
      isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected,
      className = _ref.className,
      _ref$appearance = _ref.appearance,
      appearance = _ref$appearance === void 0 ? _types.TagAppearance.Outline : _ref$appearance,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? _types.TagSize.Regular : _ref$size,
      props = _objectWithoutProperties(_ref, _excluded);

  var parentTheme = (0, _react.useTheme)();
  var tag = (0, _jsxRuntime.jsx)(_styled.StyledTag, _objectSpread(_objectSpread({}, props), {}, {
    appearance: appearance,
    size: size,
    className: className,
    isSelected: isSelected,
    children: (0, _jsxRuntime.jsxs)(_styled.TagWrapper, {
      children: [children ? (0, _jsxRuntime.jsx)(_styled.TagContent, {
        isSelected: isSelected,
        children: children
      }) : null, isSelected ? (0, _jsxRuntime.jsx)(_styled.RemoveIconWrapper, {
        children: (0, _jsxRuntime.jsx)(_tablekitIcon.Icon, {
          icon: (0, _tablekitIcon.getIcon)('close')
        })
      }) : null]
    })
  }));

  if (!tagColor) {
    return tag;
  }

  var textColor = (0, _utils.isDarkColor)(tagColor) ? _tablekitTheme.DARK_COLORS.text : _tablekitTheme.CLASSIC_COLORS.text;
  var selectedSolidBgColor = (0, _chromaTablekit.default)(tagColor).darken(2).hex();
  var selectedSolidTextColor = (0, _utils.isDarkColor)(selectedSolidBgColor) ? _tablekitTheme.DARK_COLORS.text : _tablekitTheme.CLASSIC_COLORS.text;
  return (0, _jsxRuntime.jsx)(_react.ThemeProvider, {
    theme: _defineProperty({}, _themes.tagThemeNamespace, {
      common: {
        borderColor: tagColor
      },
      outline: {
        textColor: parentTheme.colors.text,
        backgroundColor: 'transparent',
        hoverBackgroundColor: (0, _chromaTablekit.default)(tagColor).alpha(0.2).css(),
        selectedBackgroundColor: tagColor,
        hoverSelectedBackgroundColor: (0, _chromaTablekit.default)(tagColor).darken(0.7).css(),
        selectedTextColor: textColor
      },
      solid: {
        textColor: textColor,
        backgroundColor: tagColor,
        hoverBackgroundColor: (0, _chromaTablekit.default)(tagColor).darken(0.7).css(),
        selectedBackgroundColor: selectedSolidBgColor,
        selectedTextColor: selectedSolidTextColor,
        hoverSelectedBackgroundColor: (0, _chromaTablekit.default)(selectedSolidBgColor).brighten(0.7).css()
      }
    }),
    children: tag
  });
};

exports.Tag = Tag;
