var _excluded = ["className", "isDisabled", "isRequired", "isChecked", "name", "id", "onChange", "value", "children", "type", "size", "shape"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { ButtonShape } from '@tablecheck/tablekit-button';
import { getIcon } from '@tablecheck/tablekit-icon';
import { InputSize } from '@tablecheck/tablekit-input';
import { forwardRef } from 'react';
import { IS_CLICKED_ATTR } from './constants.js';
import { ButtonLabel, HiddenInput, ButtonDisplay, SelectedIcon, TextWrapper } from './styled.js';
import { jsxs, jsx } from '@emotion/react/jsx-runtime';
var isKeyboardInteraction = false;
var InputButton = /*#__PURE__*/forwardRef(function (props, ref) {
  var className = props.className,
      isDisabled = props.isDisabled,
      isRequired = props.isRequired,
      isChecked = props.isChecked,
      name = props.name,
      id = props.id,
      onChange = props.onChange,
      value = props.value,
      children = props.children,
      _props$type = props.type,
      type = _props$type === void 0 ? 'checkbox' : _props$type,
      _props$size = props.size,
      size = _props$size === void 0 ? InputSize.Regular : _props$size,
      _props$shape = props.shape,
      shape = _props$shape === void 0 ? ButtonShape.Rounded : _props$shape,
      inputProps = _objectWithoutProperties(props, _excluded);

  return jsxs(ButtonLabel, {
    className: className,
    "data-disabled": isDisabled,
    htmlFor: id,
    onClick: function onClick(event) {
      if (isKeyboardInteraction) return;
      event.currentTarget.dataset[IS_CLICKED_ATTR] = 'true';
    },
    onKeyDown: function onKeyDown() {
      isKeyboardInteraction = true;
    },
    onMouseDown: function onMouseDown() {
      isKeyboardInteraction = false;
    },
    children: [jsx(HiddenInput, _objectSpread(_objectSpread({}, inputProps), {}, {
      id: id,
      onBlur: function onBlur(event) {
        delete event.currentTarget.parentNode.dataset[IS_CLICKED_ATTR];
      },
      disabled: isDisabled,
      required: isRequired,
      ref: ref,
      value: value,
      name: name,
      onChange: onChange,
      checked: isChecked,
      type: type,
      fieldSize: size,
      shape: shape
    })), jsxs(ButtonDisplay, {
      shape: shape,
      fieldSize: size,
      children: [jsx(SelectedIcon, {
        icon: getIcon('confirm')
      }), jsx(TextWrapper, {
        "data-text": children,
        children: children
      })]
    })]
  });
});
export { InputButton };
